"""
Lark Webhook Service - D·ªãch v·ª• g·ª≠i th√¥ng b√°o qua Lark webhook
"""
import requests
import json
from typing import List
from datetime import datetime
from app.core.config.settings import settings
from app.domains.notification.models import (
    NotificationResult, NotificationType, NotificationChannel,
    ValidationAlertRequest, CustomAlertRequest
)


class LarkWebhookService:
    """
    D·ªãch v·ª• g·ª≠i th√¥ng b√°o qua Lark webhook.
    
    Class n√†y cung c·∫•p kh·∫£ nƒÉng g·ª≠i c√°c lo·∫°i th√¥ng b√°o kh√°c nhau ƒë·∫øn
    Lark (FeisHu) th√¥ng qua webhook API:
    
    - Validation alerts: C·∫£nh b√°o khi ph√°t hi·ªán l·ªói validation
    - Custom alerts: Th√¥ng b√°o t√πy ch·ªânh cho c√°c s·ª± ki·ªán ƒë·∫∑c bi·ªát
    
    Service n√†y h·ªó tr·ª£:
    - Format message theo chu·∫©n Lark webhook API
    - Error handling v√† retry logic
    - Tracking k·∫øt qu·∫£ g·ª≠i v·ªõi timestamp
    - Integration v·ªõi notification coordinator
    - Configuration-based enabling/disabling
    
    Attributes:
        webhook_url (str): URL webhook c·ªßa Lark t·ª´ settings
        channel (NotificationChannel): Channel type cho service n√†y
    """
    
    def __init__(self):
        """Kh·ªüi t·∫°o LarkWebhookService v·ªõi c·∫•u h√¨nh t·ª´ settings."""
        self.webhook_url = settings.LARK_WEBHOOK_URL
        self.channel = NotificationChannel.LARK_WEBHOOK
    
    async def send_validation_alert(self, request: ValidationAlertRequest) -> NotificationResult:
        """
        G·ª≠i c·∫£nh b√°o validation error qua Lark webhook.
        
        Method n√†y s·∫Ω format v√† g·ª≠i th√¥ng b√°o c·∫£nh b√°o khi h·ªá th·ªëng
        ph√°t hi·ªán l·ªói validation trong quy tr√¨nh ph√™ duy·ªát.
        
        Quy tr√¨nh x·ª≠ l√Ω:
        1. Ki·ªÉm tra c·∫•u h√¨nh c√≥ enable validation alerts kh√¥ng
        2. Validate webhook URL c√≥ ƒë∆∞·ª£c c·∫•u h√¨nh kh√¥ng
        3. Format message theo template c·∫£nh b√°o validation
        4. G·ª≠i HTTP POST request ƒë·∫øn Lark webhook
        5. Tr·∫£ v·ªÅ k·∫øt qu·∫£ v·ªõi th√¥ng tin chi ti·∫øt
        
        Args:
            request (ValidationAlertRequest): Request ch·ª©a th√¥ng tin validation alert
                - instance_code: M√£ instance c√≥ l·ªói validation
                - validation_errors: Danh s√°ch l·ªói validation
                - priority: M·ª©c ƒë·ªô ∆∞u ti√™n c·ªßa alert
        
        Returns:
            NotificationResult: K·∫øt qu·∫£ g·ª≠i th√¥ng b√°o bao g·ªìm:
                - success: Tr·∫°ng th√°i g·ª≠i th√†nh c√¥ng
                - notification_type: VALIDATION_ALERT
                - channel: LARK_WEBHOOK
                - instance_code: M√£ instance li√™n quan
                - sent_at: Th·ªùi gian g·ª≠i (n·∫øu th√†nh c√¥ng)
                - error: Th√¥ng b√°o l·ªói (n·∫øu th·∫•t b·∫°i)
                - metadata: Th√¥ng tin b·ªï sung (s·ªë l·ªói, priority)
        """
        try:
            # B∆∞·ªõc 1: Ki·ªÉm tra c·∫•u h√¨nh c√≥ enable validation alerts kh√¥ng
            if not settings.ENABLE_VALIDATION_ALERTS:
                print(f"‚ö†Ô∏è T√≠nh nƒÉng c·∫£nh b√°o validation ƒë√£ b·ªã t·∫Øt, b·ªè qua webhook cho {request.instance_code}")
                return NotificationResult(
                    success=True,  # Tr·∫£ v·ªÅ success v√¨ ƒë√£ x·ª≠ l√Ω (disabled)
                    notification_type=NotificationType.VALIDATION_ALERT,
                    channel=self.channel,
                    instance_code=request.instance_code,
                    cached=True,
                    metadata={"disabled": True, "reason": "ENABLE_VALIDATION_ALERTS = False"}
                )
            
            # B∆∞·ªõc 2: Ki·ªÉm tra webhook URL c√≥ ƒë∆∞·ª£c c·∫•u h√¨nh kh√¥ng
            if not self.webhook_url:
                print(f"‚ùå Ch∆∞a c·∫•u h√¨nh webhook URL cho Lark")
                return NotificationResult(
                    success=False,
                    notification_type=NotificationType.VALIDATION_ALERT,
                    channel=self.channel,
                    instance_code=request.instance_code,
                    error="Ch∆∞a c·∫•u h√¨nh webhook URL"
                )
            
            # B∆∞·ªõc 3: Format danh s√°ch l·ªói validation th√†nh text d·ªÖ ƒë·ªçc
            print(f"üìù ƒêang format {len(request.validation_errors)} l·ªói validation...")
            error_messages = "\n".join([f"‚Ä¢ {error}" for error in request.validation_errors])
            
            # T·∫°o message data theo format c·ªßa Lark webhook API
            message_data = {
                "msg_type": "text",
                "content": {
                    "text": f"""‚ö†Ô∏è C·∫¢NH B√ÅO D·ªÆ LI·ªÜU KH√îNG H·ª¢P L·ªÜ
üìÑ Request No.: {request.serial_number}
‚ùå C√°c l·ªói ph√°t hi·ªán:
{error_messages}

üîß Vui l√≤ng ki·ªÉm tra v√† x·ª≠ l√Ω."""
                }
            }
            
            # C·∫•u h√¨nh headers cho HTTP request
            headers = {"Content-Type": "application/json"}
            
            # B∆∞·ªõc 4: G·ª≠i HTTP POST request ƒë·∫øn Lark webhook
            print(f"üö® ƒêang g·ª≠i c·∫£nh b√°o validation qua webhook cho {request.instance_code}")
            response = requests.post(
                self.webhook_url, 
                headers=headers, 
                data=json.dumps(message_data),
                timeout=10  # Timeout 10 gi√¢y ƒë·ªÉ tr√°nh treo
            )
            
            # B∆∞·ªõc 5: X·ª≠ l√Ω response v√† t·∫°o k·∫øt qu·∫£
            success = response.status_code == 200
            sent_at = datetime.now().isoformat() if success else None
            
            if success:
                print(f"‚úÖ G·ª≠i c·∫£nh b√°o validation th√†nh c√¥ng cho {request.instance_code}")
            else:
                print(f"‚ùå G·ª≠i c·∫£nh b√°o validation th·∫•t b·∫°i: HTTP {response.status_code} - {response.text}")
            
            return NotificationResult(
                success=success,
                notification_type=NotificationType.VALIDATION_ALERT,
                channel=self.channel,
                instance_code=request.instance_code,
                sent_at=sent_at,
                error=None if success else f"HTTP {response.status_code}: {response.text}",
                metadata={
                    "errors_count": len(request.validation_errors),
                    "priority": request.priority.value,
                    "response_status": response.status_code
                }
            )
                
        except requests.exceptions.Timeout:
            print(f"‚è∞ Timeout khi g·ª≠i validation webhook (qu√° 10 gi√¢y)")
            return NotificationResult(
                success=False,
                notification_type=NotificationType.VALIDATION_ALERT,
                channel=self.channel,
                instance_code=request.instance_code,
                error="Timeout khi g·ª≠i webhook"
            )
        except requests.exceptions.ConnectionError:
            print(f"üîå L·ªói k·∫øt n·ªëi khi g·ª≠i validation webhook")
            return NotificationResult(
                success=False,
                notification_type=NotificationType.VALIDATION_ALERT,
                channel=self.channel,
                instance_code=request.instance_code,
                error="L·ªói k·∫øt n·ªëi webhook"
            )
        except Exception as e:
            print(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh khi g·ª≠i validation webhook: {e}")
            return NotificationResult(
                success=False,
                notification_type=NotificationType.VALIDATION_ALERT,
                channel=self.channel,
                instance_code=request.instance_code,
                error=str(e)
            )

    async def send_custom_alert(self, request: CustomAlertRequest) -> NotificationResult:
        """
        G·ª≠i th√¥ng b√°o t√πy ch·ªânh qua Lark webhook.
        
        Method n√†y cho ph√©p g·ª≠i c√°c th√¥ng b√°o t√πy ch·ªânh v·ªõi title v√† message
        do ng∆∞·ªùi d√πng ƒë·ªãnh nghƒ©a, ph√π h·ª£p cho c√°c s·ª± ki·ªán ƒë·∫∑c bi·ªát ho·∫∑c
        th√¥ng b√°o h·ªá th·ªëng.
        
        Args:
            request (CustomAlertRequest): Request ch·ª©a th√¥ng tin custom alert
                - title: Ti√™u ƒë·ªÅ th√¥ng b√°o
                - message: N·ªôi dung th√¥ng b√°o
                - instance_code: M√£ instance li√™n quan (optional)
                - priority: M·ª©c ƒë·ªô ∆∞u ti√™n
        
        Returns:
            NotificationResult: K·∫øt qu·∫£ g·ª≠i th√¥ng b√°o t∆∞∆°ng t·ª± send_validation_alert
        """
        try:
            # B∆∞·ªõc 1: Ki·ªÉm tra c·∫•u h√¨nh v√† webhook URL
            if not settings.ENABLE_VALIDATION_ALERTS or not self.webhook_url:
                print(f"‚ùå Alerts b·ªã t·∫Øt ho·∫∑c ch∆∞a c·∫•u h√¨nh webhook URL")
                return NotificationResult(
                    success=False,
                    notification_type=NotificationType.CUSTOM_ALERT,
                    channel=self.channel,
                    instance_code=request.instance_code,
                    error="Alerts b·ªã t·∫Øt ho·∫∑c ch∆∞a c·∫•u h√¨nh webhook URL"
                )
            
            # B∆∞·ªõc 2: Format message v·ªõi title v√† n·ªôi dung t√πy ch·ªânh
            print(f"üìù ƒêang t·∫°o custom alert: {request.title}")
            alert_text = f"""üîî {request.title}"""
            
            # Th√™m instance code n·∫øu c√≥
            if request.instance_code:
                alert_text += f"\nüìÑ Instance: {request.instance_code}"
                
            alert_text += f"\nüì¢ {request.message}"
            
            # T·∫°o message data cho Lark webhook
            message_data = {
                "msg_type": "text",
                "content": {"text": alert_text}
            }
            
            # B∆∞·ªõc 3: G·ª≠i HTTP request
            print(f"üì§ ƒêang g·ª≠i custom alert qua webhook...")
            headers = {"Content-Type": "application/json"}
            response = requests.post(
                self.webhook_url, 
                headers=headers, 
                data=json.dumps(message_data),
                timeout=10
            )
            
            # B∆∞·ªõc 4: X·ª≠ l√Ω k·∫øt qu·∫£
            success = response.status_code == 200
            sent_at = datetime.now().isoformat() if success else None
            
            if success:
                print(f"‚úÖ G·ª≠i custom alert th√†nh c√¥ng: {request.title}")
            else:
                print(f"‚ùå G·ª≠i custom alert th·∫•t b·∫°i: HTTP {response.status_code} - {response.text}")
            
            return NotificationResult(
                success=success,
                notification_type=NotificationType.CUSTOM_ALERT,
                channel=self.channel,
                instance_code=request.instance_code,
                sent_at=sent_at,
                error=None if success else f"HTTP {response.status_code}: {response.text}",
                metadata={
                    "title": request.title,
                    "priority": request.priority.value,
                    "has_instance_code": request.instance_code is not None,
                    "response_status": response.status_code
                }
            )
            
        except requests.exceptions.Timeout:
            print(f"‚è∞ Timeout khi g·ª≠i custom alert webhook")
            return NotificationResult(
                success=False,
                notification_type=NotificationType.CUSTOM_ALERT,
                channel=self.channel,
                instance_code=request.instance_code,
                error="Timeout khi g·ª≠i webhook"
            )
        except requests.exceptions.ConnectionError:
            print(f"üîå L·ªói k·∫øt n·ªëi khi g·ª≠i custom alert webhook")
            return NotificationResult(
                success=False,
                notification_type=NotificationType.CUSTOM_ALERT,
                channel=self.channel,
                instance_code=request.instance_code,
                error="L·ªói k·∫øt n·ªëi webhook"
            )
        except Exception as e:
            print(f"‚ùå L·ªói khi g·ª≠i custom alert: {e}")
            return NotificationResult(
                success=False,
                notification_type=NotificationType.CUSTOM_ALERT,
                channel=self.channel,
                instance_code=request.instance_code,
                error=str(e)
            )


lark_webhook_service = LarkWebhookService()