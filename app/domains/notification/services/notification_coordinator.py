"""
Notification Coordinator - B·ªô ƒëi·ªÅu ph·ªëi trung t√¢m cho t·∫•t c·∫£ k√™nh th√¥ng b√°o
"""
from typing import List, Dict, Any
from app.domains.notification.models import (
    NotificationRequest, NotificationResult, NotificationType, 
    NotificationChannel, ValidationAlertRequest, CustomAlertRequest
)
from app.domains.notification.services.lark_webhook_service import lark_webhook_service
from app.core.infrastructure.cache_service import cache_service


class NotificationCoordinator:
    """
    B·ªô ƒëi·ªÅu ph·ªëi trung t√¢m cho t·∫•t c·∫£ c√°c k√™nh th√¥ng b√°o.
    
    Class n√†y ho·∫°t ƒë·ªông nh∆∞ m·ªôt central hub ƒë·ªÉ:
    1. Qu·∫£n l√Ω v√† ƒëi·ªÅu ph·ªëi c√°c k√™nh th√¥ng b√°o kh√°c nhau (Lark, Email, SMS, etc.)
    2. NgƒÉn ch·∫∑n duplicate notifications th√¥ng qua caching mechanism
    3. Route notifications ƒë·∫øn ƒë√∫ng service d·ª±a tr√™n channel v√† type
    4. Cung c·∫•p interface th·ªëng nh·∫•t cho vi·ªác g·ª≠i th√¥ng b√°o
    5. Track v√† log k·∫øt qu·∫£ g·ª≠i th√¥ng b√°o
    
    Supported channels:
    - LARK_WEBHOOK: G·ª≠i th√¥ng b√°o qua Lark webhook
    - C√≥ th·ªÉ m·ªü r·ªông th√™m EMAIL, SMS, SLACK, etc.
    
    Supported notification types:
    - VALIDATION_ALERT: C·∫£nh b√°o validation errors
    - CUSTOM_ALERT: C·∫£nh b√°o t√πy ch·ªânh
    - QR_GENERATION: Th√¥ng b√°o t·∫°o QR (t∆∞∆°ng lai)
    
    Attributes:
        channels (Dict): Map t·ª´ notification channel ƒë·∫øn service implementation
    """
    
    def __init__(self):
        """Kh·ªüi t·∫°o NotificationCoordinator v·ªõi c√°c k√™nh th√¥ng b√°o ƒë∆∞·ª£c h·ªó tr·ª£."""
        # Mapping t·ª´ notification channel ƒë·∫øn service implementation
        # D·ªÖ d√†ng m·ªü r·ªông th√™m channels m·ªõi trong t∆∞∆°ng lai
        self.channels = {
            NotificationChannel.LARK_WEBHOOK: lark_webhook_service
            # C√≥ th·ªÉ th√™m:
            # NotificationChannel.EMAIL: email_service,
            # NotificationChannel.SMS: sms_service,
            # NotificationChannel.SLACK: slack_service,
        }
    
    async def send_notification(self, request: NotificationRequest) -> NotificationResult:
        """
        G·ª≠i th√¥ng b√°o qua k√™nh ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh v·ªõi t√≠nh nƒÉng ch·ªëng tr√πng l·∫∑p.
        
        ƒê√¢y l√† method ch√≠nh c·ªßa coordinator, th·ª±c hi·ªán:
        1. Ki·ªÉm tra duplicate notifications d·ª±a tr√™n cache
        2. Validate v√† route ƒë·∫øn ƒë√∫ng channel service  
        3. G·ªçi method ph√π h·ª£p d·ª±a tr√™n notification type
        4. Cache k·∫øt qu·∫£ ƒë·ªÉ tr√°nh duplicate trong t∆∞∆°ng lai
        5. Tr·∫£ v·ªÅ k·∫øt qu·∫£ chi ti·∫øt cho monitoring
        
        Args:
            request (NotificationRequest): Request ch·ª©a th√¥ng tin notification c·∫ßn g·ª≠i
            
        Returns:
            NotificationResult: K·∫øt qu·∫£ g·ª≠i th√¥ng b√°o bao g·ªìm:
                - success (bool): Tr·∫°ng th√°i g·ª≠i th√†nh c√¥ng
                - notification_type: Lo·∫°i th√¥ng b√°o
                - channel: K√™nh ƒë√£ s·ª≠ d·ª•ng
                - instance_code: M√£ instance li√™n quan
                - cached (bool): C√≥ ƒë∆∞·ª£c cache kh√¥ng
                - cache_hit (bool): C√≥ b·ªã skip do cache kh√¥ng
                - error (str): Th√¥ng b√°o l·ªói n·∫øu c√≥
                - metadata (Dict): Th√¥ng tin b·ªï sung
        """
        
        # B∆∞·ªõc 1: Ki·ªÉm tra duplicate notifications d·ª±a tr√™n cache
        if request.instance_code:
            # T·∫°o cache key duy nh·∫•t cho combination c·ªßa type v√† instance
            cache_key = f"{request.notification_type.value}_{request.instance_code}"
            
            print(f"üîç Ki·ªÉm tra duplicate notification cho: {cache_key}")
            
            # Ki·ªÉm tra xem ƒë√£ g·ª≠i notification t∆∞∆°ng t·ª± g·∫ßn ƒë√¢y ch∆∞a
            if cache_service.is_validation_alert_recently_sent(
                request.instance_code, 
                request.notification_type.value,
                cache_duration_minutes=10
            ):
                print(f"üîÑ PH√ÅT HI·ªÜN TH√îNG B√ÅO TR√ôNG L·∫∂P: {cache_key}")
                print(f"   ‚Üí B·ªé QUA g·ª≠i th√¥ng b√°o ƒë·ªÉ tr√°nh spam")
                
                return NotificationResult(
                    success=True,  # Tr·∫£ v·ªÅ success v√¨ ƒë√£ x·ª≠ l√Ω (cached)
                    notification_type=request.notification_type,
                    channel=request.channel,
                    instance_code=request.instance_code,
                    cached=True,
                    cache_hit=True,
                    metadata={
                        "reason": "duplicate_prevention",
                        "cache_key": cache_key,
                        "cache_duration_minutes": 10
                    }
                )
        
        # B∆∞·ªõc 2: Validate v√† l·∫•y channel service
        print(f"üì° ƒêang ƒë·ªãnh tuy·∫øn ƒë·∫øn k√™nh: {request.channel.value}")
        channel_service = self.channels.get(request.channel)
        
        if not channel_service:
            print(f"‚ùå K√™nh kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£: {request.channel.value}")
            return NotificationResult(
                success=False,
                notification_type=request.notification_type,
                channel=request.channel,
                instance_code=request.instance_code,
                error=f"K√™nh kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£: {request.channel.value}",
                metadata={
                    "available_channels": list(self.channels.keys())
                }
            )
        
        # B∆∞·ªõc 3: Route ƒë·∫øn method ph√π h·ª£p d·ª±a tr√™n notification type
        print(f"üéØ X·ª≠ l√Ω lo·∫°i th√¥ng b√°o: {request.notification_type.value}")
        
        if request.notification_type == NotificationType.VALIDATION_ALERT:
            # X·ª≠ l√Ω validation alert
            print(f"üîî T·∫°o validation alert request...")
            alert_request = ValidationAlertRequest(
                instance_code=request.instance_code,
                validation_errors=[request.message],
                priority=request.priority
            )
            
            print(f"üì§ ƒêang g·ª≠i validation alert qua {request.channel.value}...")
            result = await channel_service.send_validation_alert(alert_request)
        
        elif request.notification_type == NotificationType.CUSTOM_ALERT:
            # X·ª≠ l√Ω custom alert
            print(f"üé® T·∫°o custom alert request...")
            alert_request = CustomAlertRequest(
                title=request.title,
                message=request.message,
                instance_code=request.instance_code,
                priority=request.priority
            )
            
            print(f"üì§ ƒêang g·ª≠i custom alert qua {request.channel.value}...")
            result = await channel_service.send_custom_alert(alert_request)
        
        else:
            # Notification type kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£
            print(f"‚ùå Lo·∫°i th√¥ng b√°o kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£: {request.notification_type.value}")
            return NotificationResult(
                success=False,
                notification_type=request.notification_type,
                channel=request.channel,
                instance_code=request.instance_code,
                error=f"Lo·∫°i th√¥ng b√°o kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£: {request.notification_type.value}",
                metadata={
                    "available_types": [nt.value for nt in NotificationType]
                }
            )
        
        # B∆∞·ªõc 4: X·ª≠ l√Ω k·∫øt qu·∫£ v√† cache n·∫øu th√†nh c√¥ng
        if result.success and request.instance_code:
            print(f"‚úÖ G·ª≠i th√¥ng b√°o th√†nh c√¥ng - ƒë√°nh d·∫•u cache")
            
            # ƒê√°nh d·∫•u ƒë√£ g·ª≠i trong cache ƒë·ªÉ tr√°nh duplicate
            cache_service.mark_validation_alert_as_sent(
                request.instance_code, 
                request.notification_type.value
            )
            
            print(f"üíæ ƒê√£ l∆∞u v√†o cache ƒë·ªÉ tr√°nh duplicate trong 10 ph√∫t")
        elif result.success:
            print(f"‚úÖ G·ª≠i th√¥ng b√°o th√†nh c√¥ng (kh√¥ng c√≥ instance_code ƒë·ªÉ cache)")
        else:
            print(f"‚ùå G·ª≠i th√¥ng b√°o th·∫•t b·∫°i: {getattr(result, 'error', 'L·ªói kh√¥ng x√°c ƒë·ªãnh')}")
        
        return result


# Instance to√†n c·ª•c c·ªßa coordinator ƒë·ªÉ s·ª≠ d·ª•ng trong to√†n b·ªô h·ªá th·ªëng
notification_coordinator = NotificationCoordinator()