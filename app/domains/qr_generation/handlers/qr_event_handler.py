from typing import Dict
from app.core.infrastructure.lark_service import lark_service
from app.domains.qr_generation.services.qr_processor import qr_processor

class QREventHandler:
    """
    B·ªô x·ª≠ l√Ω s·ª± ki·ªán t·∫°o m√£ QR cho h·ªá th·ªëng ph√™ duy·ªát Lark.
    
    Class n√†y ho·∫°t ƒë·ªông nh∆∞ m·ªôt event handler ƒë·ªôc l·∫≠p, nh·∫≠n v√† x·ª≠ l√Ω
    c√°c s·ª± ki·ªán ph√™ duy·ªát ƒë·ªÉ t·ª± ƒë·ªông t·∫°o m√£ VietQR t∆∞∆°ng ·ª©ng.
    
    Quy tr√¨nh x·ª≠ l√Ω:
    1. Nh·∫≠n s·ª± ki·ªán ph√™ duy·ªát t·ª´ h·ªá th·ªëng
    2. Tr√≠ch xu·∫•t instance_code v√† approval_code t·ª´ event data
    3. L·∫•y access token ƒë·ªÉ g·ªçi Lark API
    4. G·ª≠i ƒë·∫øn QRProcessor ƒë·ªÉ x·ª≠ l√Ω t·∫°o QR
    5. Tr·∫£ v·ªÅ k·∫øt qu·∫£ x·ª≠ l√Ω
    
    Attributes:
        name (str): T√™n ƒë·ªãnh danh c·ªßa service ("QR_Generator")
    """
    
    def __init__(self):
        """Kh·ªüi t·∫°o QREventHandler v·ªõi t√™n service."""
        self.name = "QR_Generator"
    
    async def handle_approval_event(self, event_data: Dict) -> Dict:
        """
        X·ª≠ l√Ω s·ª± ki·ªán ph√™ duy·ªát ƒë·ªÉ t·∫°o m√£ QR t·ª± ƒë·ªông.
        
        [N√ÇNG C·∫§P] B·ªï sung logic ki·ªÉm tra tr·∫°ng th√°i ƒë∆°n v√† nh·∫≠n di·ªán quy tr√¨nh
        qua approval_code.
        
        Args:
            event_data (Dict): D·ªØ li·ªáu s·ª± ki·ªán ch·ª©a th√¥ng tin ph√™ duy·ªát.
                             B·∫Øt bu·ªôc ph·∫£i c√≥ 'instance_code' v√† 'approval_code'.
        
        Returns:
            Dict: K·∫øt qu·∫£ x·ª≠ l√Ω chi ti·∫øt.
        """
        try:
            # [THAY ƒê·ªîI] Tr√≠ch xu·∫•t c·∫£ instance_code v√† approval_code t·ª´ event
            instance_code = event_data.get('instance_code')
            approval_code = event_data.get('approval_code')

            if not instance_code:
                print(f"‚ùå [QR Handler] Thi·∫øu instance_code trong d·ªØ li·ªáu s·ª± ki·ªán")
                return {
                    "success": False,
                    "message": "Kh√¥ng t√¨m th·∫•y instance_code trong d·ªØ li·ªáu s·ª± ki·ªán", 
                    "service": self.name
                }
            
            # [TH√äM M·ªöI] Ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa approval_code
            if not approval_code:
                print(f"‚ùå [QR Handler] Thi·∫øu approval_code trong d·ªØ li·ªáu s·ª± ki·ªán cho instance: {instance_code}")
                return {
                    "success": False,
                    "message": "Kh√¥ng t√¨m th·∫•y approval_code trong d·ªØ li·ªáu s·ª± ki·ªán",
                    "instance_code": instance_code,
                    "service": self.name
                }

            # Logic ki·ªÉm tra tr·∫°ng th√°i ƒë∆°n (gi·ªØ nguy√™n)
            FINAL_STATUSES = ['REJECTED', 'CANCELED', 'DELETED']
            raw_data = event_data.get('raw_data', {})
            instance_status = raw_data.get('event', {}).get('object', {}).get('status')
            
            if instance_status and instance_status in FINAL_STATUSES:
                print(f"‚è≠Ô∏è [QR Handler] B·ªè qua instance {instance_code} do c√≥ tr·∫°ng th√°i cu·ªëi c√πng: {instance_status}")
                return {
                    "success": True,
                    "message": f"B·ªè qua x·ª≠ l√Ω do tr·∫°ng th√°i ƒë∆°n l√† {instance_status}",
                    "instance_code": instance_code,
                    "service": self.name
                }
            
            # [THAY ƒê·ªîI] C·∫≠p nh·∫≠t log ƒë·ªÉ hi·ªÉn th·ªã c·∫£ approval_code
            print(f"üè¶ [QR Handler] D·ªãch v·ª• QR ƒëang x·ª≠ l√Ω instance: {instance_code} (Workflow: {approval_code})")
            
            # L·∫•y access token (gi·ªØ nguy√™n)
            print(f"üîë ƒêang l·∫•y access token t·ª´ Lark...")
            access_token = await lark_service.get_access_token()
            if not access_token:
                print(f"‚ùå Kh√¥ng th·ªÉ l·∫•y access token t·ª´ Lark")
                return {
                    "success": False,
                    "message": "Kh√¥ng th·ªÉ l·∫•y access token t·ª´ Lark",
                    "service": self.name
                }
            
            print(f"‚úÖ ƒê√£ l·∫•y access token th√†nh c√¥ng")
            
            # [THAY ƒê·ªîI] Truy·ªÅn approval_code v√†o service x·ª≠ l√Ω logic nghi·ªáp v·ª•
            print(f"‚öôÔ∏è B·∫Øt ƒë·∫ßu x·ª≠ l√Ω t·∫°o QR cho {instance_code}...")
            result = await qr_processor.process_approval_with_qr_comment(
                instance_code, approval_code, access_token
            )
            
            # X·ª≠ l√Ω k·∫øt qu·∫£ tr·∫£ v·ªÅ (gi·ªØ nguy√™n)
            if result:
                print(f"‚úÖ [QR Handler] Ho√†n th√†nh x·ª≠ l√Ω QR cho {instance_code}")
                return {
                    "success": True,
                    "message": f"X·ª≠ l√Ω QR ho√†n th√†nh th√†nh c√¥ng cho {instance_code}",
                    "instance_code": instance_code,
                    "service": self.name
                }
            else:
                print(f"‚ùå [QR Handler] X·ª≠ l√Ω QR th·∫•t b·∫°i cho {instance_code}")
                return {
                    "success": False,
                    "message": f"X·ª≠ l√Ω QR th·∫•t b·∫°i cho {instance_code}",
                    "instance_code": instance_code,
                    "service": self.name
                }
            
        except Exception as e:
            # X·ª≠ l√Ω l·ªói (gi·ªØ nguy√™n)
            print(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh trong QR Service: {str(e)}")
            import traceback
            print(f"üìã Chi ti·∫øt l·ªói:\n{traceback.format_exc()}")
            
            return {
                "success": False,
                "message": f"L·ªói QR Service: {str(e)}",
                "service": self.name,
                "error_type": type(e).__name__
            }

qr_event_handler = QREventHandler()