from typing import Dict, List, Optional
from app.core.config.node_config import get_node_config
from app.core.config.field_constants import FFN
from app.core.utils.field_extractor import FieldExtractor
from app.domains.qr_generation.models import AmountDetectionResult, QRTypeResult, QRType


class AmountDetector:
    """
    B·ªô ph√°t hi·ªán v√† x√°c ƒë·ªãnh s·ªë ti·ªÅn cho vi·ªác t·∫°o m√£ QR.

    Class n√†y ch·ªãu tr√°ch nhi·ªám ph√¢n t√≠ch d·ªØ li·ªáu form ƒë·ªÉ:
    - T√¨m ki·∫øm c√°c tr∆∞·ªùng ch·ª©a th√¥ng tin s·ªë ti·ªÅn
    - X√°c ƒë·ªãnh lo·∫°i QR (t·∫°m ·ª©ng ho·∫∑c thanh to√°n) d·ª±a tr√™n node strategy
    - Validate v√† tr·∫£ v·ªÅ s·ªë ti·ªÅn ph√π h·ª£p cho t·ª´ng node

    H·ªó tr·ª£ nhi·ªÅu chi·∫øn l∆∞·ª£c x·ª≠ l√Ω kh√°c nhau:
    - detect_both_fields: Ph√°t hi·ªán c·∫£ t·∫°m ·ª©ng v√† thanh to√°n
    - payment_field_only: Ch·ªâ x·ª≠ l√Ω tr∆∞·ªùng thanh to√°n

    Attributes:
        field_extractor (FieldExtractor): C√¥ng c·ª• tr√≠ch xu·∫•t d·ªØ li·ªáu t·ª´ form
    """

    def __init__(self):
        """Kh·ªüi t·∫°o AmountDetector v·ªõi FieldExtractor."""
        self.field_extractor = FieldExtractor()

    def detect_available_amount_fields(self, form_data: List[Dict], node_config: Dict = None) -> Dict:
        """
        Qu√©t d·ªØ li·ªáu form ƒë·ªÉ t√¨m c√°c tr∆∞·ªùng s·ªë ti·ªÅn theo c·∫•u h√¨nh node.
        
        Ph∆∞∆°ng th·ª©c n√†y s·∫Ω t√¨m ki·∫øm c√°c tr∆∞·ªùng t·∫°m ·ª©ng v√† thanh to√°n d·ª±a tr√™n
        c·∫•u h√¨nh c·ªßa node. N·∫øu kh√¥ng c√≥ c·∫•u h√¨nh, s·∫Ω s·ª≠ d·ª•ng t√™n tr∆∞·ªùng m·∫∑c ƒë·ªãnh.
        
        Args:
            form_data (List[Dict]): D·ªØ li·ªáu form t·ª´ API response c·ªßa Lark
            node_config (Dict, optional): C·∫•u h√¨nh node ch·ª©a t√™n c√°c tr∆∞·ªùng c·∫ßn t√¨m
            
        Returns:
            Dict: K·∫øt qu·∫£ ph√°t hi·ªán bao g·ªìm:
                - advance_amount: Gi√° tr·ªã s·ªë ti·ªÅn t·∫°m ·ª©ng
                - payment_amount: Gi√° tr·ªã s·ªë ti·ªÅn thanh to√°n  
                - advance_field_found: C√≥ t√¨m th·∫•y tr∆∞·ªùng t·∫°m ·ª©ng kh√¥ng
                - payment_field_found: C√≥ t√¨m th·∫•y tr∆∞·ªùng thanh to√°n kh√¥ng
                - all_amount_fields: T·∫•t c·∫£ tr∆∞·ªùng ch·ª©a t·ª´ kh√≥a ti·ªÅn
                - fields_used: T√™n c√°c tr∆∞·ªùng ƒë√£ s·ª≠ d·ª•ng ƒë·ªÉ t√¨m ki·∫øm
        """
        try:
            # L·∫•y t√™n tr∆∞·ªùng t·ª´ c·∫•u h√¨nh node ho·∫∑c s·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh
            if node_config:
                advance_field = node_config.get('advance_field')
                payment_field = node_config.get('payment_field')
            else:
                # Gi√° tr·ªã m·∫∑c ƒë·ªãnh ƒë·ªÉ t∆∞∆°ng th√≠ch ng∆∞·ª£c
                advance_field = FFN.ADVANCE_AMOUNT
                payment_field = FFN.PAYMENT_AMOUNT
            
            # Tr√≠ch xu·∫•t gi√° tr·ªã t·ª´ c·∫£ 2 tr∆∞·ªùng (ch·ªâ khi t√™n tr∆∞·ªùng kh√¥ng ph·∫£i None)
            advance_value = None
            payment_value = None
            
            if advance_field:
                advance_value = self.field_extractor.extract_field_value(form_data, advance_field)
            
            if payment_field:
                payment_value = self.field_extractor.extract_field_value(form_data, payment_field)
            
            # Debug: T√¨m t·∫•t c·∫£ tr∆∞·ªùng c√≥ ch·ª©a t·ª´ kh√≥a "ti·ªÅn" ho·∫∑c "amount"
            all_amount_fields = self.field_extractor.get_amount_fields(form_data)
            
            # T·∫°o k·∫øt qu·∫£ chi ti·∫øt
            result = {
                'advance_amount': advance_value,
                'payment_amount': payment_value,
                'advance_field_found': advance_value is not None,
                'payment_field_found': payment_value is not None,
                'all_amount_fields': all_amount_fields,
                'fields_used': {
                    'advance_field': advance_field,
                    'payment_field': payment_field
                }
            }
            
            # Hi·ªÉn th·ªã k·∫øt qu·∫£ ph√°t hi·ªán tr∆∞·ªùng
            print(f"üí∞ K·∫øt qu·∫£ ph√°t hi·ªán tr∆∞·ªùng s·ªë ti·ªÅn:")
            if advance_field:
                status = f"‚úÖ {advance_value}" if advance_value else "‚ùå Kh√¥ng t√¨m th·∫•y"
                print(f"   - {advance_field}: {status}")
            else:
                print(f"   - Tr∆∞·ªùng t·∫°m ·ª©ng: ‚ùå Ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh")
                
            if payment_field:
                status = f"‚úÖ {payment_value}" if payment_value else "‚ùå Kh√¥ng t√¨m th·∫•y"
                print(f"   - {payment_field}: {status}")
            else:
                print(f"   - Tr∆∞·ªùng thanh to√°n: ‚ùå Ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh")
                
            print(f"   - T·∫•t c·∫£ tr∆∞·ªùng s·ªë ti·ªÅn: {list(all_amount_fields.keys())}")
            
            return result
            
        except Exception as e:
            print(f"‚ùå L·ªói khi ph√°t hi·ªán tr∆∞·ªùng s·ªë ti·ªÅn: {e}")
            return {
                'advance_amount': None,
                'payment_amount': None,
                'advance_field_found': False,
                'payment_field_found': False,
                'all_amount_fields': {},
                'fields_used': {'advance_field': None, 'payment_field': None},
                'error': str(e)
            }

    def determine_qr_type_by_fields(self, field_detection_result: Dict) -> Dict:
        """
        X√°c ƒë·ªãnh lo·∫°i QR d·ª±a tr√™n c√°c tr∆∞·ªùng c√≥ gi√° tr·ªã h·ª£p l·ªá.
        
        Logic ∆∞u ti√™n: T·∫°m ·ª©ng ƒë∆∞·ª£c ∆∞u ti√™n tr∆∞·ªõc, sau ƒë√≥ ƒë·∫øn thanh to√°n.
        Ch·ªâ ch·ªçn tr∆∞·ªùng c√≥ gi√° tr·ªã s·ªë h·ª£p l·ªá v√† l·ªõn h∆°n 0.
        
        Args:
            field_detection_result (Dict): K·∫øt qu·∫£ t·ª´ detect_available_amount_fields()
            
        Returns:
            Dict: K·∫øt qu·∫£ quy·∫øt ƒë·ªãnh lo·∫°i QR bao g·ªìm:
                - qr_type: Lo·∫°i QR ('advance', 'payment', ho·∫∑c 'none')
                - amount: S·ªë ti·ªÅn ƒë√£ ch·ªçn
                - field_used: T√™n tr∆∞·ªùng ƒë√£ s·ª≠ d·ª•ng
                - reason: L√Ω do quy·∫øt ƒë·ªãnh
        """
        try:
            # Tr√≠ch xu·∫•t th√¥ng tin t·ª´ k·∫øt qu·∫£ ph√°t hi·ªán tr∆∞·ªùng
            advance_found = field_detection_result.get('advance_field_found', False)
            payment_found = field_detection_result.get('payment_field_found', False)
            advance_amount = field_detection_result.get('advance_amount')
            payment_amount = field_detection_result.get('payment_amount')

            # L·∫•y t√™n tr∆∞·ªùng ƒë·ªÉ hi·ªÉn th·ªã trong k·∫øt qu·∫£
            fields_used = field_detection_result.get('fields_used', {})
            advance_field_name = fields_used.get('advance_field', FFN.ADVANCE_AMOUNT)
            payment_field_name = fields_used.get('payment_field', FFN.PAYMENT_AMOUNT)

            print(f"üéØ ƒêang x√°c ƒë·ªãnh lo·∫°i QR: t·∫°m_·ª©ng={advance_found}, thanh_to√°n={payment_found}")
            
            # Logic ∆∞u ti√™n: Ki·ªÉm tra t·∫°m ·ª©ng tr∆∞·ªõc
            if advance_found and advance_amount:
                try:
                    amount_value = float(advance_amount)
                    if amount_value > 0:
                        print(f"‚úÖ Ch·ªçn t·∫°m ·ª©ng: {amount_value:,} VND")
                        return {
                            'qr_type': 'advance',
                            'amount': amount_value,
                            'field_used': advance_field_name,
                            'reason': 'T√¨m th·∫•y s·ªë ti·ªÅn t·∫°m ·ª©ng h·ª£p l·ªá'
                        }
                except (ValueError, TypeError):
                    print(f"‚ö†Ô∏è S·ªë ti·ªÅn t·∫°m ·ª©ng kh√¥ng h·ª£p l·ªá: {advance_amount}")
            
            # N·∫øu kh√¥ng c√≥ t·∫°m ·ª©ng, ki·ªÉm tra thanh to√°n
            if payment_found and payment_amount:
                try:
                    amount_value = float(payment_amount)
                    if amount_value > 0:
                        print(f"‚úÖ Ch·ªçn thanh to√°n: {amount_value:,} VND")
                        return {
                            'qr_type': 'payment', 
                            'amount': amount_value,
                            'field_used': payment_field_name,
                            'reason': 'T√¨m th·∫•y s·ªë ti·ªÅn thanh to√°n h·ª£p l·ªá'
                        }
                except (ValueError, TypeError):
                    print(f"‚ö†Ô∏è S·ªë ti·ªÅn thanh to√°n kh√¥ng h·ª£p l·ªá: {payment_amount}")
            
            # Kh√¥ng t√¨m th·∫•y tr∆∞·ªùng h·ª£p l·ªá n√†o
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y s·ªë ti·ªÅn h·ª£p l·ªá")
            return {
                'qr_type': 'none',
                'amount': None,
                'field_used': None,
                'reason': f'Kh√¥ng t√¨m th·∫•y s·ªë ti·ªÅn h·ª£p l·ªá (t·∫°m_·ª©ng={advance_found}, thanh_to√°n={payment_found})'
            }
            
        except Exception as e:
            print(f"‚ùå L·ªói khi x√°c ƒë·ªãnh lo·∫°i QR: {e}")
            return {
                'qr_type': 'none',
                'amount': None,
                'field_used': None,
                'reason': f'L·ªói: {str(e)}'
            }

    def get_amount_and_type_for_node(self, node_id: str, form_data: List[Dict]) -> Dict:
        """
        L·∫•y s·ªë ti·ªÅn v√† lo·∫°i QR cho m·ªôt node c·ª• th·ªÉ d·ª±a tr√™n chi·∫øn l∆∞·ª£c c·ªßa node.
        
        ƒê√¢y l√† ph∆∞∆°ng th·ª©c ch√≠nh ƒë·ªÉ x·ª≠ l√Ω node, s·∫Ω:
        1. L·∫•y c·∫•u h√¨nh node t·ª´ node_id
        2. √Åp d·ª•ng chi·∫øn l∆∞·ª£c ph√π h·ª£p (detect_both_fields ho·∫∑c payment_field_only)
        3. Ph√¢n t√≠ch form data v√† tr·∫£ v·ªÅ k·∫øt qu·∫£
        
        Args:
            node_id (str): ID c·ªßa node c·∫ßn x·ª≠ l√Ω
            form_data (List[Dict]): D·ªØ li·ªáu form t·ª´ Lark API
            
        Returns:
            Dict: K·∫øt qu·∫£ x·ª≠ l√Ω bao g·ªìm:
                - success (bool): X·ª≠ l√Ω th√†nh c√¥ng hay kh√¥ng
                - qr_type (str): Lo·∫°i QR ƒë√£ x√°c ƒë·ªãnh
                - amount (float): S·ªë ti·ªÅn cho QR
                - field_used (str): Tr∆∞·ªùng ƒë√£ s·ª≠ d·ª•ng
                - node_strategy (str): Chi·∫øn l∆∞·ª£c c·ªßa node
                - reason (str): L√Ω do k·∫øt qu·∫£
                - field_detection (Dict): Chi ti·∫øt ph√°t hi·ªán tr∆∞·ªùng
        """
        try:
            # L·∫•y c·∫•u h√¨nh node t·ª´ h·ªá th·ªëng
            node_config = get_node_config(node_id)
            if not node_config:
                print(f"‚ùå Kh√¥ng t√¨m th·∫•y c·∫•u h√¨nh cho node {node_id}")
                return {
                    'success': False,
                    'qr_type': 'none',
                    'error': f'Kh√¥ng t√¨m th·∫•y node {node_id} trong c·∫•u h√¨nh'
                }
            
            # Tr√≠ch xu·∫•t th√¥ng tin node
            strategy = node_config['strategy']
            node_name = node_config['name']
            
            print(f"üîç ƒêang x·ª≠ l√Ω node: {node_name} (chi·∫øn l∆∞·ª£c: {strategy})")
            
            # Ph√°t hi·ªán c√°c tr∆∞·ªùng c√≥ s·∫µn trong form
            field_detection = self.detect_available_amount_fields(form_data, node_config)
            
            # √Åp d·ª•ng chi·∫øn l∆∞·ª£c x·ª≠ l√Ω theo c·∫•u h√¨nh
            if strategy == "detect_both_fields":
                # Chi·∫øn l∆∞·ª£c ph√°t hi·ªán k√©p: c√≥ th·ªÉ l√† t·∫°m ·ª©ng ho·∫∑c thanh to√°n
                print(f"üìã √Åp d·ª•ng chi·∫øn l∆∞·ª£c ph√°t hi·ªán k√©p")
                qr_decision = self.determine_qr_type_by_fields(field_detection)
                
                return {
                    'success': qr_decision['qr_type'] != 'none',
                    'qr_type': qr_decision['qr_type'],
                    'amount': qr_decision['amount'],
                    'field_used': qr_decision['field_used'],
                    'node_strategy': strategy,
                    'reason': f"K·∫øt qu·∫£ ph√°t hi·ªán k√©p: {qr_decision['reason']}",
                    'field_detection': field_detection
                }
                
            elif strategy == "payment_field_only":
                # Chi·∫øn l∆∞·ª£c ch·ªâ thanh to√°n: ch·ªâ ki·ªÉm tra tr∆∞·ªùng thanh to√°n
                print(f"üí≥ √Åp d·ª•ng chi·∫øn l∆∞·ª£c ch·ªâ thanh to√°n")
                payment_amount = field_detection.get('payment_amount')
                payment_found = field_detection.get('payment_field_found', False)
                payment_field_name = node_config.get('payment_field')

                if payment_found and payment_amount:
                    try:
                        amount_value = float(payment_amount)
                        if amount_value > 0:
                            print(f"‚úÖ T√¨m th·∫•y s·ªë ti·ªÅn thanh to√°n h·ª£p l·ªá: {amount_value:,} VND")
                            return {
                                'success': True,
                                'qr_type': 'payment',
                                'amount': amount_value,
                                'field_used': payment_field_name,
                                'node_strategy': strategy,
                                'reason': 'Chi·∫øn l∆∞·ª£c ch·ªâ thanh to√°n: t√¨m th·∫•y s·ªë ti·ªÅn h·ª£p l·ªá',
                                'field_detection': field_detection
                            }
                    except (ValueError, TypeError):
                        print(f"‚ö†Ô∏è S·ªë ti·ªÅn thanh to√°n kh√¥ng h·ª£p l·ªá: {payment_amount}")
                
                print(f"‚ùå Kh√¥ng t√¨m th·∫•y s·ªë ti·ªÅn thanh to√°n h·ª£p l·ªá")
                return {
                    'success': False,
                    'qr_type': 'none',
                    'amount': None,
                    'field_used': None,
                    'node_strategy': strategy,
                    'reason': f'Chi·∫øn l∆∞·ª£c ch·ªâ thanh to√°n: kh√¥ng c√≥ s·ªë ti·ªÅn h·ª£p l·ªá (t√¨m_th·∫•y={payment_found}, gi√°_tr·ªã={payment_amount})',
                    'field_detection': field_detection
                }
            
            else:
                print(f"‚ùå Chi·∫øn l∆∞·ª£c kh√¥ng x√°c ƒë·ªãnh: {strategy}")
                return {
                    'success': False,
                    'qr_type': 'none',
                    'error': f'Chi·∫øn l∆∞·ª£c kh√¥ng x√°c ƒë·ªãnh: {strategy}'
                }
                
        except Exception as e:
            print(f"‚ùå L·ªói khi x·ª≠ l√Ω node {node_id}: {e}")
            return {
                'success': False,
                'qr_type': 'none',
                'error': str(e)
            }