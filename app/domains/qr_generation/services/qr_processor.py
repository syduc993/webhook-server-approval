import json
from app.core.config.settings import settings
# NODE_CONFIG v√† AmountDetector kh√¥ng c√≤n c·∫ßn thi·∫øt cho logic ch√≠nh, nh∆∞ng gi·ªØ l·∫°i import ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng c√°c h√†m ph·ª•
from app.core.config.node_config import NODE_CONFIG
from app.core.config.field_constants import FFN
from app.core.infrastructure.lark_service import lark_service
from app.core.infrastructure.cache_service import cache_service
from app.core.utils.field_extractor import FieldExtractor
from app.domains.qr_generation.services.vietqr_service import vietqr_service
# AmountDetector kh√¥ng c√≤n ƒë∆∞·ª£c s·ª≠ d·ª•ng trong h√†m ch√≠nh n·ªØa
# from app.domains.qr_generation.services.amount_detector import AmountDetector
from app.domains.qr_generation.models import QRType, BankInfo

class QRProcessor:
    """
    B·ªô x·ª≠ l√Ω QR ch√≠nh - Qu·∫£n l√Ω logic nghi·ªáp v·ª• t·∫°o v√† x·ª≠ l√Ω m√£ QR cho h·ªá th·ªëng ph√™ duy·ªát.
    
    Class n√†y x·ª≠ l√Ω to√†n b·ªô quy tr√¨nh t·ª´ vi·ªác ki·ªÉm tra node ph√™ duy·ªát, tr√≠ch xu·∫•t d·ªØ li·ªáu,
    validate th√¥ng tin, t·∫°o m√£ VietQR v√† upload l√™n h·ªá th·ªëng Lark.
    
    Attributes:
        field_extractor (FieldExtractor): B·ªô tr√≠ch xu·∫•t tr∆∞·ªùng d·ªØ li·ªáu t·ª´ form
    """

    def __init__(self):
        """Kh·ªüi t·∫°o QRProcessor v·ªõi c√°c service c·∫ßn thi·∫øt."""
        self.field_extractor = FieldExtractor()
        # self.amount_detector kh√¥ng c√≤n c·∫ßn thi·∫øt n·ªØa
        # self.amount_detector = AmountDetector()

    # --- H√ÄM C≈® N√ÄY V·∫™N GI·ªÆ L·∫†I NH∆ØNG KH√îNG ƒê∆Ø·ª¢C G·ªåI TRONG H√ÄM CH√çNH ---
    def check_pending_allowed_node_in_task_list(self, api_response: dict, node_config: dict = None) -> dict:
        """
        Ki·ªÉm tra node c√≥ tr·∫°ng th√°i ph√π h·ª£p v√† ƒë√°p ·ª©ng c√°c ƒëi·ªÅu ki·ªán b·ªï sung.
        (H√†m n√†y kh√¥ng c√≤n ƒë∆∞·ª£c s·ª≠ d·ª•ng trong lu·ªìng ch√≠nh t·∫°o QR ƒë·ªông)
        """
        if node_config is None:
            node_config = NODE_CONFIG
        # ... logic c·ªßa h√†m c≈© gi·ªØ nguy√™n ...
        try:
            # Tr√≠ch xu·∫•t d·ªØ li·ªáu t·ª´ API response
            data = api_response.get('data', {})
            task_list = data.get('task_list', [])
            configured_node_ids = list(node_config.keys())
            
            # T·∫°o map ƒë·ªÉ tra c·ª©u nhanh tr·∫°ng th√°i c·ªßa c√°c node
            node_status_map = {}
            for task in task_list:
                node_id = task.get('node_id')
                status = task.get('status', 'UNKNOWN')
                if node_id:
                    node_status_map[node_id] = status
            
            print(f"üîç ƒêang ki·ªÉm tra c√°c node v·ªõi ƒëi·ªÅu ki·ªán b·ªï sung:")
            for node_id, config in node_config.items():
                required_status = config.get('required_status', 'PENDING')
                additional_conditions = config.get('additional_conditions', [])
                print(f"   ‚Ä¢ {node_id[:8]}... - {config['name']} (y√™u c·∫ßu: {required_status})")
                if additional_conditions:
                    for condition in additional_conditions:
                        print(f"     + ƒêi·ªÅu ki·ªán th√™m: {condition['node_id'][:8]}... ph·∫£i ·ªü tr·∫°ng th√°i {condition['required_status']}")
            
            print(f"üìã Danh s√°ch task ch·ª©a {len(task_list)} nhi·ªám v·ª•")
            
            matching_configured_nodes = []
            
            # Duy·ªát qua t·ª´ng node ƒë√£ c·∫•u h√¨nh
            for node_id in configured_node_ids:
                config = node_config[node_id]
                required_status = config.get('required_status', 'PENDING')
                current_status = node_status_map.get(node_id, 'NOT_FOUND')
                
                # Ki·ªÉm tra ƒëi·ªÅu ki·ªán ch√≠nh
                if current_status != required_status:
                    continue
                    
                # Ki·ªÉm tra c√°c ƒëi·ªÅu ki·ªán b·ªï sung
                additional_conditions = config.get('additional_conditions', [])
                all_conditions_met = True
                
                for condition in additional_conditions:
                    condition_node_id = condition['node_id']
                    condition_required_status = condition['required_status']
                    condition_current_status = node_status_map.get(condition_node_id, 'NOT_FOUND')
                    
                    print(f"üîç Ki·ªÉm tra ƒëi·ªÅu ki·ªán b·ªï sung: {condition_node_id[:8]}... ")
                    print(f"   Y√™u c·∫ßu: {condition_required_status}, Hi·ªán t·∫°i: {condition_current_status}")
                    
                    if condition_current_status != condition_required_status:
                        all_conditions_met = False
                        print(f"‚ùå ƒêi·ªÅu ki·ªán b·ªï sung kh√¥ng ƒë√°p ·ª©ng cho {node_id[:8]}...")
                        break
                    else:
                        print(f"‚úÖ ƒêi·ªÅu ki·ªán b·ªï sung ƒë√£ ƒë√°p ·ª©ng")
                
                # N·∫øu t·∫•t c·∫£ ƒëi·ªÅu ki·ªán ƒë·ªÅu th·ªèa m√£n
                if all_conditions_met:
                    matching_configured_nodes.append({
                        'node_id': node_id,
                        'config': config,
                        'strategy': config['strategy'],
                        'matched_status': current_status,
                        'required_status': required_status,
                        'additional_conditions_met': True
                    })
                    print(f"‚úÖ T√¨m th·∫•y node ph√π h·ª£p: {node_id[:8]}... ({config['name']}) - Tr·∫°ng th√°i: {current_status}")
            
            # Tr·∫£ v·ªÅ node ph√π h·ª£p ƒë·∫ßu ti√™n
            if matching_configured_nodes:
                first_matching = matching_configured_nodes[0]
                return {
                    'found': True,
                    'node_id': first_matching['node_id'],
                    'node_config': first_matching['config'],
                    'strategy': first_matching['strategy'],
                    'matched_status': first_matching['matched_status'],
                    'required_status': first_matching['required_status'],
                    'all_tasks': task_list,
                    'all_matching_configured': matching_configured_nodes,
                    'node_status_map': node_status_map
                }
            else:
                print(f"‚ùå Kh√¥ng t√¨m th·∫•y node n√†o ƒë√°p ·ª©ng t·∫•t c·∫£ ƒëi·ªÅu ki·ªán")
                return {
                    'found': False,
                    'node_id': None,
                    'node_config': None,
                    'strategy': None,
                    'matched_status': None,
                    'all_tasks': task_list,
                    'all_matching_configured': [],
                    'node_status_map': node_status_map
                }
            
        except Exception as e:
            print(f"‚ùå L·ªói khi ki·ªÉm tra node: {e}")
            return {
                'found': False,
                'error': str(e),
                'all_tasks': [],
                'all_matching_configured': []
            }


    def validate_amount_value(self, amount_value) -> dict:
        """
        Validate v√† chuy·ªÉn ƒë·ªïi gi√° tr·ªã s·ªë ti·ªÅn.
        """
        try:
            if amount_value is None:
                return {'valid': False, 'amount': None, 'error': 'S·ªë ti·ªÅn kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'}
            
            amount_float = float(amount_value)
            amount_int = int(amount_float)
            
            if amount_int <= 0:
                return {'valid': False, 'amount': amount_int, 'error': 'S·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n 0'}
                
            return {'valid': True, 'amount': amount_int, 'error': None}
            
        except (ValueError, TypeError) as e:
            return {'valid': False, 'amount': None, 'error': f'ƒê·ªãnh d·∫°ng s·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá: {str(e)}'}

    async def process_approval_with_qr_comment(self, instance_code: str, access_token: str) -> bool:
        """
        X·ª≠ l√Ω ph√™ duy·ªát v·ªõi t·∫°o QR code v√† comment (phi√™n b·∫£n n√¢ng c·∫•p h·ªó tr·ª£ nhi·ªÅu l·∫ßn t·∫°m ·ª©ng).
        """
        try:
            # B∆∞·ªõc 1: L·∫•y th√¥ng tin chi ti·∫øt c·ªßa instance
            api_response = await lark_service.get_approval_instance(instance_code, access_token)
            if not api_response or 'data' not in api_response:
                print(f"‚ùå Kh√¥ng th·ªÉ l·∫•y th√¥ng tin instance {instance_code}")
                return False
            
            task_list = api_response['data'].get('task_list', [])
            form_str = api_response['data'].get('form', '[]')
            form_data = json.loads(form_str)

            # --- [LOGIC M·ªöI] B·∫Øt ƒë·∫ßu ph·∫ßn t√¨m ki·∫øm l·∫ßn t·∫°m ·ª©ng ho·∫°t ƒë·ªông ---
            
            # 2.1: T√¨m t·∫•t c·∫£ c√°c node "Th·ªß qu·ªπ chi ti·ªÅn t·∫°m ·ª©ng" trong quy tr√¨nh
            cashier_nodes = [task for task in task_list if "Th·ªß qu·ªπ chi ti·ªÅn t·∫°m ·ª©ng" in task.get('node_name', '')]
            print(f"üîç T√¨m th·∫•y {len(cashier_nodes)} node 'Th·ªß qu·ªπ chi ti·ªÅn t·∫°m ·ª©ng' trong quy tr√¨nh.")

            active_advance_info = None
            
            # 2.2: L·∫∑p qua c√°c node th·ªß qu·ªπ ƒë·ªÉ t√¨m node ƒëang PENDING
            for i, node in enumerate(cashier_nodes, 1):
                node_id = node.get('node_id')
                node_status = node.get('status')
                print(f"   - Ki·ªÉm tra l·∫ßn t·∫°m ·ª©ng {i} (Node ID: {node_id[:8]}..., Tr·∫°ng th√°i: {node_status})...")

                # ƒêi·ªÅu ki·ªán 1: Node ph·∫£i ·ªü tr·∫°ng th√°i PENDING
                if node_status == 'PENDING':
                    # ƒêi·ªÅu ki·ªán 2: Ng∆∞·ªùi d√πng ph·∫£i ch·ªçn "Yes" cho l·∫ßn t·∫°m ·ª©ng t∆∞∆°ng ·ª©ng
                    yes_no_field_name = f"Thanh to√°n t·∫°m ·ª©ng l·∫ßn {i}: Y/N"
                    amount_field_name = f"S·ªë ti·ªÅn t·∫°m ·ª©ng l·∫ßn {i}:"

                    yes_no_value = self.field_extractor.extract_field_value(form_data, yes_no_field_name)
                    
                    if yes_no_value == "Yes":
                        print(f"     ‚úÖ ƒêi·ªÅu ki·ªán th·ªèa m√£n: Node PENDING v√† ng∆∞·ªùi d√πng ch·ªçn 'Yes'.")
                        amount_value = self.field_extractor.extract_field_value(form_data, amount_field_name)
                        
                        active_advance_info = {
                            "amount": amount_value,
                            "node_id": node_id,
                            "node_name": node.get('node_name'),
                            "qr_type": "advance",
                            "field_used": amount_field_name,
                            "advance_round": i
                        }
                        print(f"     ‚û°Ô∏è L·∫ßn t·∫°m ·ª©ng {i} ƒë∆∞·ª£c k√≠ch ho·∫°t v·ªõi s·ªë ti·ªÅn: {amount_value}")
                        break # T√¨m th·∫•y r·ªìi th√¨ d·ª´ng l·∫°i
                    else:
                        print(f"     - B·ªè qua: Ng∆∞·ªùi d√πng kh√¥ng ch·ªçn 'Yes' cho l·∫ßn {i} (Gi√° tr·ªã: {yes_no_value}).")
                else:
                    print(f"     - B·ªè qua: Tr·∫°ng th√°i node kh√¥ng ph·∫£i PENDING.")

            # 2.3: X·ª≠ l√Ω k·∫øt qu·∫£ t√¨m ki·∫øm
            if not active_advance_info:
                print(f"‚è≠Ô∏è  Kh√¥ng c√≥ l·∫ßn t·∫°m ·ª©ng n√†o ƒëang ho·∫°t ƒë·ªông (PENDING v√† ƒë∆∞·ª£c ch·ªçn 'Yes'). B·ªè qua t·∫°o QR.")
                return True # Coi nh∆∞ th√†nh c√¥ng v√¨ ƒë√£ x·ª≠ l√Ω ƒë√∫ng (b·ªè qua)

            # --- [LOGIC M·ªöI] K·∫øt th√∫c ph·∫ßn t√¨m ki·∫øm ---


            # --- [PH·∫¶N GI·ªÆ NGUY√äN] Ti·∫øp t·ª•c x·ª≠ l√Ω v·ªõi th√¥ng tin ƒë√£ t√¨m ƒë∆∞·ª£c ---

            # L·∫•y c√°c bi·∫øn t·ª´ k·∫øt qu·∫£ t√¨m ki·∫øm
            matching_node_id = active_advance_info['node_id']
            qr_type = active_advance_info['qr_type']
            amount_value = active_advance_info['amount']
            field_used = active_advance_info['field_used']
            node_name = active_advance_info['node_name']
            
            # B∆∞·ªõc 5: Ki·ªÉm tra duplicate TR∆Ø·ªöC KHI t·∫°o QR
            if cache_service.is_qr_recently_generated(
                instance_code, matching_node_id, qr_type, 
                settings.QR_CACHE_DURATION_MINUTES
            ):
                print(f"‚ö†Ô∏è PH√ÅT HI·ªÜN TR√ôNG L·∫∂P: QR {qr_type.upper()} cho node {node_name} ƒë√£ ƒë∆∞·ª£c t·∫°o g·∫ßn ƒë√¢y.")
                print(f"   ‚Üí B·ªé QUA t·∫°o QR ƒë·ªÉ tr√°nh tr√πng l·∫∑p.")
                return True
            
            print(f"üí∞ Chi ti·∫øt t·∫°o QR cho l·∫ßn t·∫°m ·ª©ng {active_advance_info['advance_round']}:")
            print(f"   - Lo·∫°i: {qr_type}")
            print(f"   - S·ªë ti·ªÅn: {amount_value}")
            print(f"   - Tr∆∞·ªùng s·ª≠ d·ª•ng: {field_used}")
            print(f"   - Node k√≠ch ho·∫°t: {node_name} ({matching_node_id[:8]}...)")
            
            # B∆∞·ªõc 6: Validate s·ªë ti·ªÅn
            amount_validation = self.validate_amount_value(amount_value)
            if not amount_validation['valid']:
                print(f"‚ùå S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá: {amount_validation['error']}")
                return False
                
            amount_int = amount_validation['amount']

            # B∆∞·ªõc 7: Tr√≠ch xu·∫•t th√¥ng tin ng√¢n h√†ng
            bank_id = self.field_extractor.extract_field_value(form_data, FFN.BANK_NAME)
            account_no = self.field_extractor.extract_field_value(form_data, FFN.BANK_ACCOUNT_NUMBER)
            account_name = self.field_extractor.extract_field_value(form_data, FFN.BENEFICIARY_NAME)

            if not all([bank_id, account_no, account_name]):
                missing = [f for f, v in {FFN.BANK_NAME: bank_id, FFN.BANK_ACCOUNT_NUMBER: account_no, FFN.BENEFICIARY_NAME: account_name}.items() if not v]
                print(f"‚ùå Thi·∫øu th√¥ng tin ng√¢n h√†ng: {', '.join(missing)}")
                return False
            
            # B∆∞·ªõc 8: T·∫°o m√¥ t·∫£ QR theo lo·∫°i
            description = vietqr_service.generate_qr_description(f"{qr_type}{active_advance_info['advance_round']}", instance_code)
            
            print(f"üè¶ T·∫°o VietQR v·ªõi th√¥ng tin:")
            print(f"   - Ng√¢n h√†ng: {bank_id}")
            print(f"   - S·ªë t√†i kho·∫£n: {account_no}")
            print(f"   - T√™n ng∆∞·ªùi nh·∫≠n: {account_name}")
            print(f"   - S·ªë ti·ªÅn: {amount_int:,} VND")
            print(f"   - M√¥ t·∫£: {description}")
            
            # B∆∞·ªõc 9: T·∫°o VietQR code trong b·ªô nh·ªõ
            qr_image_buffer = vietqr_service.create_qr_in_memory(
                bank_id=bank_id,
                account_no=account_no,
                amount=amount_int,
                description=description,
                account_name=account_name
            )
            
            if not qr_image_buffer:
                print("‚ùå Kh√¥ng th·ªÉ t·∫°o m√£ VietQR")
                return False
            
            # B∆∞·ªõc 10: Upload ·∫£nh l√™n Lark Approval
            filename = f"{instance_code}_{qr_type}{active_advance_info['advance_round']}_qr.png"
            upload_result = await lark_service.upload_image_to_approval(qr_image_buffer, filename, access_token)
            
            if not upload_result['success']:
                print(f"‚ùå Upload th·∫•t b·∫°i: {upload_result['error']}")
                return False
            
            # B∆∞·ªõc 11: ƒê√°nh d·∫•u ƒë√£ t·∫°o QR SAU KHI upload th√†nh c√¥ng
            cache_service.mark_qr_as_generated(instance_code, matching_node_id, qr_type)
            
            # B∆∞·ªõc 12: T·∫°o comment n√¢ng cao v·ªõi th√¥ng tin chi ti·∫øt
            comment_result = await lark_service.create_enhanced_comment_with_image(
                instance_code=instance_code,
                file_url=upload_result['file_url'],
                file_code=upload_result['file_code'],
                filename=filename,
                qr_type=f"{qr_type} L·∫ßn {active_advance_info['advance_round']}", # L√†m r√µ h∆°n trong comment
                amount=amount_int,
                node_name=node_name,
                access_token=access_token
            )
            
            if comment_result['success']:
                print(f"‚úÖ Ho√†n th√†nh x·ª≠ l√Ω ph√™ duy·ªát {instance_code}")
                print(f"üí∞ Lo·∫°i: {qr_type.upper()} L·∫¶N {active_advance_info['advance_round']} | S·ªë ti·ªÅn: {amount_int:,} VND")
                print(f"üè∑Ô∏è Node: {node_name}")
                print(f"üìã Tr∆∞·ªùng: {field_used}")
                print(f"üí¨ ID Comment: {comment_result['comment_id']}")
                return True
            else:
                print(f"‚ùå T·∫°o comment th·∫•t b·∫°i: {comment_result['error']}")
                return False
                
        except Exception as e:
            print(f"‚ùå L·ªói x·ª≠ l√Ω ph√™ duy·ªát: {e}")
            import traceback
            traceback.print_exc()
            return False

qr_processor = QRProcessor()