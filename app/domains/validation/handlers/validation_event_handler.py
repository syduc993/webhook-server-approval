"""
Validation Event Handler - B·ªô x·ª≠ l√Ω s·ª± ki·ªán validation cho h·ªá th·ªëng ph√™ duy·ªát
"""
from typing import Dict, List, Optional
import json
from app.domains.validation.services import validation_service
from app.core.infrastructure import lark_service
from app.domains.notification.services import lark_webhook_service
from app.core.infrastructure import cache_service

class ValidationEventHandler:
    """
    B·ªô x·ª≠ l√Ω s·ª± ki·ªán validation cho h·ªá th·ªëng ph√™ duy·ªát.
    
    Class n√†y ch·ªãu tr√°ch nhi·ªám:
    1. Nh·∫≠n v√† x·ª≠ l√Ω c√°c s·ª± ki·ªán ph√™ duy·ªát ƒë·ªÉ validation
    2. Ch·∫°y c√°c quy t·∫Øc validation tr√™n d·ªØ li·ªáu form v√† workflow
    3. G·ª≠i c·∫£nh b√°o qua webhook khi ph√°t hi·ªán v·∫•n ƒë·ªÅ
    4. NgƒÉn ch·∫∑n duplicate alerts ƒë·ªÉ tr√°nh spam notification
    5. X·ª≠ l√Ω l·ªói v√† g·ª≠i error alerts khi c·∫ßn thi·∫øt
    
    Attributes:
        name (str): T√™n ƒë·ªãnh danh c·ªßa service
        webhook_service: Service g·ª≠i webhook notifications
    """
    
    def __init__(self):
        """Kh·ªüi t·∫°o ValidationEventHandler v·ªõi webhook service."""
        self.name = "Validation_Service"
        self.webhook_service = lark_webhook_service

    async def handle_approval_event(self, event_data: Dict) -> Dict:
        """
        X·ª≠ l√Ω s·ª± ki·ªán ph√™ duy·ªát ƒë·ªÉ th·ª±c hi·ªán validation v·ªõi c∆° ch·∫ø anti-spam n√¢ng cao.

        [N√ÇNG C·∫§P] B·ªï sung logic nh·∫≠n di·ªán quy tr√¨nh qua approval_code.
        """
        instance_code = event_data.get('instance_code')
        approval_code = event_data.get('approval_code')

        if not instance_code:
            return {"success": False, "message": "Kh√¥ng t√¨m th·∫•y instance_code", "service": self.name}
        
        if not approval_code:
            return {
                "success": False, 
                "message": f"Kh√¥ng t√¨m th·∫•y approval_code cho instance {instance_code}", 
                "service": self.name
            }

        try:

            FINAL_STATUSES = ['REJECTED', 'CANCELED', 'DELETED']
            raw_data = event_data.get('raw_data', {})
            instance_status = raw_data.get('event', {}).get('object', {}).get('status')
            event_body = raw_data.get('event', {})
            if not instance_status:
                instance_status = event_body.get('status')

            if instance_status and instance_status in FINAL_STATUSES:
                print(f"‚è≠Ô∏è [Validation Handler] B·ªè qua instance {instance_code} do c√≥ tr·∫°ng th√°i cu·ªëi c√πng: {instance_status}")
                return {
                    "success": True,
                    "message": f"B·ªè qua validation do tr·∫°ng th√°i ƒë∆°n l√† {instance_status}",
                    "instance_code": instance_code,
                    "webhook_sent": False,
                    "service": self.name
                }
            
            print(f"üîç [Validation Handler] D·ªãch v·ª• Validation ƒëang x·ª≠ l√Ω: {instance_code} (Workflow: {approval_code})")
            
            # L·∫•y d·ªØ li·ªáu t·ª´ Lark (gi·ªØ nguy√™n)
            access_token = await lark_service.get_access_token()
            if not access_token:
                return {"success": False, "message": "Kh√¥ng th·ªÉ l·∫•y access token", "service": self.name}

            api_response = await lark_service.get_approval_instance(instance_code, access_token)
            if not api_response or 'data' not in api_response:
                return {"success": False, "message": "Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu instance", "service": self.name}
            
            serial_number = api_response.get('data', {}).get('serial_number')
            form_data = json.loads(api_response['data'].get('form', '[]'))
            task_list = api_response['data'].get('task_list', [])
            
            validation_results = validation_service.run_all_validations(
                approval_code=approval_code, # <-- Tham s·ªë m·ªõi
                form_data=form_data, 
                task_list=task_list, 
                node_id="dummy_node_id" 
            )
            invalid_results = [r for r in validation_results if not r.is_valid]
            
            if not invalid_results:
                print("‚úÖ [Validation Handler] T·∫•t c·∫£ validation ƒë·ªÅu th√†nh c√¥ng.")
                return {
                    "success": True, "message": "T·∫•t c·∫£ validation ƒë·ªÅu th√†nh c√¥ng",
                    "webhook_sent": False, "webhook_skipped_count": 0,
                    "service": self.name
                }
            
            alerts_to_send = []
            skipped_count = 0
            
            print(f"‚ö†Ô∏è [Validation Handler] Ph√°t hi·ªán {len(invalid_results)} v·∫•n ƒë·ªÅ. ƒêang ki·ªÉm tra cache anti-spam...")
            for result in invalid_results:
                specific_error_key = f"{result.validation_type.value}_{hash(result.message)}"
                
                if cache_service.is_validation_alert_recently_sent(
                    instance_code, specific_error_key, cache_duration_minutes=10
                ):
                    print(f"  üîÑ B·ªè qua (ƒë√£ cache): {result.message[:80]}...")
                    skipped_count += 1
                else:
                    print(f"  üÜï C·∫ßn g·ª≠i c·∫£nh b√°o cho: {result.message[:80]}...")
                    alerts_to_send.append(result)

            webhook_sent = False
            if alerts_to_send:
                error_messages = [r.message for r in alerts_to_send]
                print(f"üì® [Validation Handler] ƒêang g·ª≠i {len(error_messages)} c·∫£nh b√°o m·ªõi qua webhook...")
                
                webhook_sent = await self._send_validation_alert(instance_code, error_messages, serial_number)
                
                if webhook_sent:
                    print("‚úÖ [Validation Handler] G·ª≠i webhook th√†nh c√¥ng. ƒêang c·∫≠p nh·∫≠t cache...")
                    for result in alerts_to_send:
                        specific_error_key = f"{result.validation_type.value}_{hash(result.message)}"
                        cache_service.mark_validation_alert_as_sent(instance_code, specific_error_key)
                        print(f"  üîí ƒê√£ cache cho: {result.message[:80]}...")
                else:
                    print("‚ùå [Validation Handler] G·ª≠i webhook th·∫•t b·∫°i.")
            else:
                print("‚úÖ [Validation Handler] Kh√¥ng c√≥ c·∫£nh b√°o m·ªõi n√†o c·∫ßn g·ª≠i. T·∫•t c·∫£ ƒë√£ ƒë∆∞·ª£c cache.")

            return {
                "success": True,
                "message": f"Ho√†n th√†nh validation. {len(alerts_to_send)} c·∫£nh b√°o m·ªõi ƒë√£ ƒë∆∞·ª£c g·ª≠i. {skipped_count} c·∫£nh b√°o b·ªã b·ªè qua do cache.",
                "alerts_sent_count": len(alerts_to_send),
                "webhook_sent": webhook_sent,
                "webhook_skipped_count": skipped_count,
                "validation_details": [r.dict() for r in validation_results],
                "service": self.name
            }
            
        except Exception as e:
            # X·ª≠ l√Ω l·ªói h·ªá th·ªëng (gi·ªØ nguy√™n)
            print(f"‚ùå [Validation Handler] L·ªói nghi√™m tr·ªçng trong Validation Service: {str(e)}")
            return {
                "success": False,
                "message": f"L·ªói Validation Service: {str(e)}",
                "service": self.name
            }

    async def _send_validation_alert(self, instance_code: str, error_messages: List[str], serial_number: Optional[str]) -> bool:
        """G·ª≠i c·∫£nh b√°o validation qua webhook service."""
        try:
            from app.domains.notification.models import ValidationAlertRequest, NotificationPriority
            request = ValidationAlertRequest(
                instance_code=instance_code,
                serial_number=serial_number,
                validation_errors=error_messages,
                priority=NotificationPriority.HIGH
            )
            result = await self.webhook_service.send_validation_alert(request)
            return result.success
        except Exception as e:
            print(f"‚ùå L·ªói khi g·ª≠i validation alert: {e}")
            return False

    async def _send_error_alert(self, instance_code: str, error_message: str) -> bool:
        """G·ª≠i c·∫£nh b√°o l·ªói h·ªá th·ªëng qua webhook service."""
        try:
            from app.domains.notification.models import CustomAlertRequest
            alert_request = CustomAlertRequest(
                 title="L·ªñI VALIDATION SERVICE",
                 message=f"L·ªói x·ª≠ l√Ω validation cho {instance_code}: {error_message}",
                 instance_code=instance_code
            )
            result = await self.webhook_service.send_custom_alert(alert_request)
            return result.success
        except Exception as e:
            print(f"‚ùå L·ªói khi g·ª≠i error alert: {e}")
            return False


validation_event_handler = ValidationEventHandler()