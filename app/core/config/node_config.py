from .field_constants import FFN

# C·∫•u h√¨nh chi ti·∫øt cho t·ª´ng node trong approval workflow
NODE_CONFIG = {
    # Node tr∆∞·ªüng ph√≤ng duy·ªát - C√≥ th·ªÉ detect c·∫£ advance v√† payment (Kh√¥ng b·∫Øt ƒë∆∞·ª£c node submit, node n√†y lu√¥n l√† node ti·∫øp theo)
    "30e5338b60587c64c7cef5f6a7211ccb": {
        "name": "truong_phong_duyet",
        "type": "dual_detection",                   # Lo·∫°i node h·ªó tr·ª£ c·∫£ advance v√† payment
        "advance_field": FFN.ADVANCE_AMOUNT,        # T√™n field ch·ª©a s·ªë ti·ªÅn t·∫°m ·ª©ng
        "payment_field": FFN.PAYMENT_AMOUNT,        # T√™n field ch·ª©a s·ªë ti·ªÅn thanh to√°n
        "strategy": "detect_both_fields",           # Strategy t·ª± ƒë·ªông detect lo·∫°i QR d·ª±a tr√™n fields
        "required_status": "PENDING",               # Status c·∫ßn thi·∫øt ƒë·ªÉ trigger QR generation
        "description": "Tr∆∞·ªüng ph√≤ng duy·ªát - Auto detect advance/payment"
    },
    
    # Node thanh to√°n
    "f23535375a26847ef71c1cbf0755f246": {
        "name": "thanh_toan_sau_tam_ung", 
        "type": "payment_only",                          # Lo·∫°i node ch·ªâ x·ª≠ l√Ω payment
        "advance_field": None,                           # Kh√¥ng c√≥ field advance
        "payment_field": FFN.REMAINING_PAYMENT_AMOUNT,   # Field ch·ª©a s·ªë ti·ªÅn c·∫ßn thanh to√°n
        "strategy": "payment_field_only",                # Strategy ch·ªâ x·ª≠ l√Ω payment field
        "required_status": "APPROVED",                   # Node n√†y c·∫ßn status APPROVED
        
        # ƒêi·ªÅu ki·ªán b·ªï sung ƒë·ªÉ trigger QR generation
        "additional_conditions": [
            {
                "node_id": "ef83b231885a1a77658f32808a199764",  # Node ti·∫øp theo
                "required_status": "PENDING",                   # Node ti·∫øp theo ph·∫£i PENDING
                "description": "Node ti·∫øp theo ph·∫£i PENDING"    # M√¥ t·∫£ ƒëi·ªÅu ki·ªán
            }
        ],
        "description": "Thanh to√°n sau t·∫°m ·ª©ng - Payment only (trigger on APPROVED + next node PENDING)"
    }
}


def get_node_config(node_id: str) -> dict:
    """
    L·∫•y configuration chi ti·∫øt cho m·ªôt node_id c·ª• th·ªÉ.
    
    Args:
        node_id (str): Node ID c·∫ßn l·∫•y configuration
        
    Returns:
        dict: Dictionary ch·ª©a c·∫•u h√¨nh node bao g·ªìm:
            - name: T√™n node
            - type: Lo·∫°i node (dual_detection, payment_only, etc.)
            - advance_field: T√™n field ch·ª©a s·ªë ti·ªÅn t·∫°m ·ª©ng
            - payment_field: T√™n field ch·ª©a s·ªë ti·ªÅn thanh to√°n
            - strategy: Chi·∫øn l∆∞·ª£c x·ª≠ l√Ω (detect_both_fields, payment_field_only, etc.)
            - required_status: Status c·∫ßn thi·∫øt ƒë·ªÉ trigger
            - additional_conditions: C√°c ƒëi·ªÅu ki·ªán b·ªï sung (optional)
            - description: M√¥ t·∫£ node
        Tr·∫£ v·ªÅ None n·∫øu kh√¥ng t√¨m th·∫•y node_id
    """
    return NODE_CONFIG.get(node_id)


def get_node_strategy(node_id: str) -> str:
    """
    L·∫•y strategy x·ª≠ l√Ω c·ªßa m·ªôt node c·ª• th·ªÉ.
    
    Args:
        node_id (str): Node ID c·∫ßn l·∫•y strategy
        
    Returns:
        str: T√™n strategy c·ªßa node nh∆∞:
            - "detect_both_fields": T·ª± ƒë·ªông detect advance/payment
            - "payment_field_only": Ch·ªâ x·ª≠ l√Ω payment
            - "unknown": N·∫øu kh√¥ng t√¨m th·∫•y node ho·∫∑c strategy
    """
    config = get_node_config(node_id)
    return config.get("strategy", "unknown") if config else "unknown"


def print_node_config_summary():
    """
    In ra t√≥m t·∫Øt chi ti·∫øt c·ªßa NODE_CONFIG bao g·ªìm additional conditions.
    
    Function n√†y hi·ªÉn th·ªã th√¥ng tin t·ªïng quan v·ªÅ t·∫•t c·∫£ nodes ƒë∆∞·ª£c c·∫•u h√¨nh,
    bao g·ªìm strategy, fields, required status v√† c√°c ƒëi·ªÅu ki·ªán b·ªï sung.
    """
    print("üìã T√≥m t·∫Øt c·∫•u h√¨nh NODE_CONFIG:")
    
    # Duy·ªát qua t·ª´ng node trong configuration
    for node_id, config in NODE_CONFIG.items():
        required_status = config.get('required_status', 'PENDING')
        additional_conditions = config.get('additional_conditions', [])
        
        # Hi·ªÉn th·ªã th√¥ng tin c∆° b·∫£n c·ªßa node
        print(f"   ‚Ä¢ {node_id[:8]}... - {config['name']} ({config['strategy']})")
        print(f"     C√°c tr∆∞·ªùng: advance='{config['advance_field']}', payment='{config['payment_field']}'")
        print(f"     Status y√™u c·∫ßu: {required_status}")
        
        # Hi·ªÉn th·ªã c√°c ƒëi·ªÅu ki·ªán b·ªï sung n·∫øu c√≥
        if additional_conditions:
            print(f"     ƒêi·ªÅu ki·ªán b·ªï sung:")
            for condition in additional_conditions:
                condition_node_short = condition['node_id'][:8]
                condition_status = condition['required_status']
                print(f"       - {condition_node_short}... ph·∫£i c√≥ status {condition_status}")


def get_configured_node_ids():
    """
    L·∫•y danh s√°ch t·∫•t c·∫£ node IDs ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh.
    
    Returns:
        List[str]: Danh s√°ch t·∫•t c·∫£ node IDs c√≥ trong NODE_CONFIG
    """
    return list(NODE_CONFIG.keys())


# Backward compatibility - Gi·ªØ l·∫°i t√™n c≈© ƒë·ªÉ kh√¥ng break existing code
ALLOWED_NODE_IDS = get_configured_node_ids()
