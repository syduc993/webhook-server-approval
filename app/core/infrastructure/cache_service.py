from datetime import datetime, timedelta
from typing import Dict, Optional


class CacheService:
    """
    Service qu·∫£n l√Ω cache cho QR code generation v√† validation alerts.
    
    CacheService gi√∫p tr√°nh tr√πng l·∫∑p b·∫±ng c√°ch cache th·ªùi ƒëi·ªÉm t·∫°o QR codes
    v√† g·ª≠i validation alerts. Service n√†y s·ª≠ d·ª•ng in-memory cache v·ªõi
    automatic expiration ƒë·ªÉ ti·∫øt ki·ªám b·ªô nh·ªõ.
    
    Attributes:
        qr_generation_cache (Dict[str, datetime]): Cache th·ªùi ƒëi·ªÉm t·∫°o QR codes
        validation_alert_cache (Dict[str, datetime]): Cache th·ªùi ƒëi·ªÉm g·ª≠i validation alerts
    """
    
    def __init__(self):
        """Kh·ªüi t·∫°o CacheService v·ªõi c√°c cache dictionary r·ªóng."""
        self.qr_generation_cache: Dict[str, datetime] = {}
        self.validation_alert_cache: Dict[str, datetime] = {}
    
    def generate_cache_key(self, instance_code: str, node_id: str, qr_type: str) -> str:
        """
        T·∫°o cache key unique cho QR code ƒë·ªÉ detect duplicates.
        
        Args:
            instance_code (str): M√£ instance c·ªßa approval workflow
            node_id (str): ID c·ªßa node trong workflow
            qr_type (str): Lo·∫°i QR code (payment, advance, etc.)
            
        Returns:
            str: Cache key format: {instance_code}_{short_node_id}_{qr_type}
        """
        # R√∫t ng·∫Øn node_id ƒë·ªÉ cache key kh√¥ng qu√° d√†i
        short_node_id = node_id[:8] if len(node_id) > 8 else node_id
        return f"{instance_code}_{short_node_id}_{qr_type}"

    def generate_validation_cache_key(self, instance_code: str, validation_type: str) -> str:
        """
        T·∫°o cache key cho validation alerts ƒë·ªÉ tr√°nh spam alerts.
        
        Args:
            instance_code (str): M√£ instance c·ªßa approval workflow
            validation_type (str): Lo·∫°i validation (amount_mismatch, workflow_error, etc.)
            
        Returns:
            str: Cache key format: validation_{instance_code}_{validation_type}
        """
        return f"validation_{instance_code}_{validation_type}"

    def is_qr_recently_generated(self, instance_code: str, node_id: str, qr_type: str, 
                               cache_duration_minutes: int = 5) -> bool:
        """
        Ki·ªÉm tra xem QR code ƒë√£ ƒë∆∞·ª£c t·∫°o trong kho·∫£ng th·ªùi gian g·∫ßn ƒë√¢y ch∆∞a.
        
        Args:
            instance_code (str): M√£ instance c·ªßa approval workflow
            node_id (str): ID c·ªßa node trong workflow
            qr_type (str): Lo·∫°i QR code
            cache_duration_minutes (int, optional): Th·ªùi gian cache t√≠nh b·∫±ng ph√∫t. M·∫∑c ƒë·ªãnh 5 ph√∫t.
            
        Returns:
            bool: True n·∫øu QR ƒë√£ ƒë∆∞·ª£c t·∫°o g·∫ßn ƒë√¢y, False n·∫øu ch∆∞a ho·∫∑c ƒë√£ h·∫øt h·∫°n
        """
        try:
            cache_key = self.generate_cache_key(instance_code, node_id, qr_type)
            
            # Ki·ªÉm tra xem cache key c√≥ t·ªìn t·∫°i kh√¥ng
            if cache_key not in self.qr_generation_cache:
                print(f"üÜï Cache miss: {cache_key} - ch∆∞a t·ª´ng t·∫°o QR")
                return False
            
            # T√≠nh th·ªùi gian ƒë√£ tr·∫£i qua k·ªÉ t·ª´ l·∫ßn t·∫°o QR cu·ªëi
            generated_time = self.qr_generation_cache[cache_key]
            current_time = datetime.now()
            time_diff = current_time - generated_time
            
            # N·∫øu ƒë√£ qu√° th·ªùi gian cache th√¨ x√≥a entry v√† return False
            if time_diff > timedelta(minutes=cache_duration_minutes):
                del self.qr_generation_cache[cache_key] 
                print(f"‚è∞ Cache ƒë√£ h·∫øt h·∫°n: {cache_key} ({time_diff.total_seconds()/60:.1f} ph√∫t tr∆∞·ªõc)")
                return False
            
            print(f"üîí Cache hit: {cache_key} - QR ƒë√£ t·∫°o {time_diff.total_seconds()/60:.1f} ph√∫t tr∆∞·ªõc")
            return True
            
        except Exception as e:
            print(f"‚ùå L·ªói khi ki·ªÉm tra cache: {e}")
            return False

    def is_validation_alert_recently_sent(self, instance_code: str, validation_type: str,
                                        cache_duration_minutes: int = 10) -> bool:
        """
        Ki·ªÉm tra xem validation alert ƒë√£ ƒë∆∞·ª£c g·ª≠i trong kho·∫£ng th·ªùi gian g·∫ßn ƒë√¢y ch∆∞a.
        
        Args:
            instance_code (str): M√£ instance c·ªßa approval workflow
            validation_type (str): Lo·∫°i validation error
            cache_duration_minutes (int, optional): Th·ªùi gian cache t√≠nh b·∫±ng ph√∫t. M·∫∑c ƒë·ªãnh 10 ph√∫t.
            
        Returns:
            bool: True n·∫øu alert ƒë√£ ƒë∆∞·ª£c g·ª≠i g·∫ßn ƒë√¢y, False n·∫øu ch∆∞a ho·∫∑c ƒë√£ h·∫øt h·∫°n
        """
        try:
            cache_key = self.generate_validation_cache_key(instance_code, validation_type)
            
            # Ki·ªÉm tra xem cache key c√≥ t·ªìn t·∫°i kh√¥ng
            if cache_key not in self.validation_alert_cache:
                print(f"üÜï Validation cache miss: {cache_key} - ch∆∞a t·ª´ng g·ª≠i alert")
                return False
            
            # T√≠nh th·ªùi gian ƒë√£ tr·∫£i qua k·ªÉ t·ª´ l·∫ßn g·ª≠i alert cu·ªëi
            sent_time = self.validation_alert_cache[cache_key]
            current_time = datetime.now()
            time_diff = current_time - sent_time
            
            # N·∫øu ƒë√£ qu√° th·ªùi gian cache th√¨ x√≥a entry v√† return False
            if time_diff > timedelta(minutes=cache_duration_minutes):
                del self.validation_alert_cache[cache_key]
                print(f"‚è∞ Validation cache ƒë√£ h·∫øt h·∫°n: {cache_key} ({time_diff.total_seconds()/60:.1f} ph√∫t tr∆∞·ªõc)")
                return False
            
            print(f"üîí Validation cache hit: {cache_key} - Alert ƒë√£ g·ª≠i {time_diff.total_seconds()/60:.1f} ph√∫t tr∆∞·ªõc")
            return True
            
        except Exception as e:
            print(f"‚ùå L·ªói khi ki·ªÉm tra validation cache: {e}")
            return False

    def mark_qr_as_generated(self, instance_code: str, node_id: str, qr_type: str):
        """
        ƒê√°nh d·∫•u QR code ƒë√£ ƒë∆∞·ª£c t·∫°o b·∫±ng c√°ch l∆∞u timestamp v√†o cache.
        
        Args:
            instance_code (str): M√£ instance c·ªßa approval workflow
            node_id (str): ID c·ªßa node trong workflow
            qr_type (str): Lo·∫°i QR code
        """
        try:
            cache_key = self.generate_cache_key(instance_code, node_id, qr_type)
            self.qr_generation_cache[cache_key] = datetime.now()
            
            print(f"üîí ƒê√£ ƒë√°nh d·∫•u QR ƒë∆∞·ª£c t·∫°o: {cache_key}")
            print(f"üìä K√≠ch th∆∞·ªõc QR Cache: {len(self.qr_generation_cache)} entries")
            
        except Exception as e:
            print(f"‚ùå L·ªói khi ƒë√°nh d·∫•u cache: {e}")

    def mark_validation_alert_as_sent(self, instance_code: str, validation_type: str):
        """
        ƒê√°nh d·∫•u validation alert ƒë√£ ƒë∆∞·ª£c g·ª≠i b·∫±ng c√°ch l∆∞u timestamp v√†o cache.
        
        Args:
            instance_code (str): M√£ instance c·ªßa approval workflow
            validation_type (str): Lo·∫°i validation error
        """
        try:
            cache_key = self.generate_validation_cache_key(instance_code, validation_type)
            self.validation_alert_cache[cache_key] = datetime.now()
            
            print(f"üîí ƒê√£ ƒë√°nh d·∫•u validation alert ƒë∆∞·ª£c g·ª≠i: {cache_key}")
            print(f"üìä K√≠ch th∆∞·ªõc Validation Cache: {len(self.validation_alert_cache)} entries")
            
        except Exception as e:
            print(f"‚ùå L·ªói khi ƒë√°nh d·∫•u validation cache: {e}")

    def get_cache_status(self) -> Dict:
        """
        L·∫•y tr·∫°ng th√°i chi ti·∫øt c·ªßa t·∫•t c·∫£ cache (QR v√† validation).
        
        Returns:
            Dict: Dictionary ch·ª©a th√¥ng tin chi ti·∫øt v·ªÅ:
                - qr_cache: Th√¥ng tin v·ªÅ QR generation cache
                - validation_cache: Th√¥ng tin v·ªÅ validation alert cache
                - current_time: Th·ªùi gian hi·ªán t·∫°i
        """
        try:
            current_time = datetime.now()
            
            # T√≠nh to√°n tr·∫°ng th√°i QR Cache
            active_qr_cache = {}
            for cache_key, generated_time in self.qr_generation_cache.items():
                time_diff = current_time - generated_time
                minutes_ago = time_diff.total_seconds() / 60
                
                active_qr_cache[cache_key] = {
                    'generated_at': generated_time.isoformat(),
                    'minutes_ago': round(minutes_ago, 1),
                    'will_expire_in_minutes': max(0, 5 - minutes_ago)  # 5 ph√∫t cho QR
                }
            
            # T√≠nh to√°n tr·∫°ng th√°i Validation Cache
            active_validation_cache = {}
            for cache_key, sent_time in self.validation_alert_cache.items():
                time_diff = current_time - sent_time
                minutes_ago = time_diff.total_seconds() / 60
                
                active_validation_cache[cache_key] = {
                    'sent_at': sent_time.isoformat(),
                    'minutes_ago': round(minutes_ago, 1),
                    'will_expire_in_minutes': max(0, 10 - minutes_ago)  # 10 ph√∫t cho validation
                }
            
            return {
                'qr_cache': {
                    'total_cached_qr': len(self.qr_generation_cache),
                    'active_cache': active_qr_cache,
                    'cache_duration_minutes': 5
                },
                'validation_cache': {
                    'total_cached_alerts': len(self.validation_alert_cache),
                    'active_cache': active_validation_cache,
                    'cache_duration_minutes': 10
                },
                'current_time': current_time.isoformat()
            }
            
        except Exception as e:
            return {"error": str(e)}

    def clear_cache(self) -> Dict:
        """
        X√≥a t·∫•t c·∫£ cache entries (c·∫£ QR v√† validation) v√† tr·∫£ v·ªÅ th√¥ng tin chi ti·∫øt.
        
        Returns:
            Dict: Dictionary ch·ª©a:
                - message: Th√¥ng b√°o k·∫øt qu·∫£
                - cleared_qr_keys: Danh s√°ch QR cache keys ƒë√£ b·ªã x√≥a
                - cleared_validation_keys: Danh s√°ch validation cache keys ƒë√£ b·ªã x√≥a
                - current_cache_sizes: K√≠ch th∆∞·ªõc cache hi·ªán t·∫°i (sau khi clear)
        """
        try:
            # L∆∞u l·∫°i th√¥ng tin tr∆∞·ªõc khi clear
            old_qr_count = len(self.qr_generation_cache)
            old_validation_count = len(self.validation_alert_cache)
            old_qr_keys = list(self.qr_generation_cache.keys())
            old_validation_keys = list(self.validation_alert_cache.keys())
            
            # Clear t·∫•t c·∫£ cache
            self.qr_generation_cache.clear()
            self.validation_alert_cache.clear()
            
            return {
                'message': f'ƒê√£ x√≥a th√†nh c√¥ng {old_qr_count} QR cache entries v√† {old_validation_count} validation cache entries',
                'cleared_qr_keys': old_qr_keys,
                'cleared_validation_keys': old_validation_keys,
                'current_qr_cache_size': len(self.qr_generation_cache),
                'current_validation_cache_size': len(self.validation_alert_cache)
            }
            
        except Exception as e:
            return {"success": False, "error": str(e)}


cache_service = CacheService()
