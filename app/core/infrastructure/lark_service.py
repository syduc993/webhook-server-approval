import requests
import json
from datetime import datetime
from typing import Optional, Dict
from app.core.config.settings import settings


class LarkService:
    """
    Service t∆∞∆°ng t√°c v·ªõi Lark/Feishu API ƒë·ªÉ qu·∫£n l√Ω approval instances.
    
    LarkService cung c·∫•p c√°c ch·ª©c nƒÉng ch√≠nh:
    - X√°c th·ª±c v√† qu·∫£n l√Ω access tokens v·ªõi caching
    - L·∫•y th√¥ng tin approval instances
    - Upload h√¨nh ·∫£nh l√™n Lark
    - T·∫°o comments v·ªõi attachments
    
    Attributes:
        access_token_cache (Dict): Cache l∆∞u tr·ªØ access token v√† th·ªùi gian h·∫øt h·∫°n
    """
    
    def __init__(self):
        """Kh·ªüi t·∫°o LarkService v·ªõi token cache r·ªóng."""
        self.access_token_cache = {"token": None, "expires_at": None}
    
    async def get_access_token(self) -> Optional[str]:
        """
        L·∫•y access token t·ª´ LarkSuite API v·ªõi caching mechanism.
        
        Method n√†y s·∫Ω s·ª≠ d·ª•ng cached token n·∫øu c√≤n hi·ªáu l·ª±c, otherwise
        s·∫Ω g·ªçi API ƒë·ªÉ l·∫•y token m·ªõi v√† cache l·∫°i.
        
        Returns:
            Optional[str]: Access token n·∫øu th√†nh c√¥ng, None n·∫øu th·∫•t b·∫°i
        """
        current_time = datetime.now().timestamp()
        
        # Ki·ªÉm tra xem token ƒë√£ cache c√≤n hi·ªáu l·ª±c kh√¥ng
        if (self.access_token_cache["token"] and 
            self.access_token_cache["expires_at"] and 
            current_time < self.access_token_cache["expires_at"]):
            return self.access_token_cache["token"]
        
        try:
            # G·ªçi API ƒë·ªÉ l·∫•y tenant access token m·ªõi
            url = f"{settings.BASE_URL}/auth/v3/tenant_access_token/internal"
            payload = {
                "app_id": settings.LARK_APP_ID,
                "app_secret": settings.LARK_APP_SECRET
            }
            
            response = requests.post(url, json=payload, timeout=10)
            data = response.json()
            
            # Ki·ªÉm tra response t·ª´ API
            if data.get("code") == 0:
                token = data["tenant_access_token"]
                expires_in = data.get("expire", 7200)  # M·∫∑c ƒë·ªãnh 2 ti·∫øng
                
                # Cache token v·ªõi buffer time ƒë·ªÉ tr√°nh token h·∫øt h·∫°n gi·ªØa ch·ª´ng
                self.access_token_cache["token"] = token
                self.access_token_cache["expires_at"] = current_time + expires_in - settings.TOKEN_CACHE_BUFFER_SECONDS
                
                print(f"‚úÖ L·∫•y access token th√†nh c√¥ng")
                return token
            else:
                print(f"‚ùå L·∫•y token th·∫•t b·∫°i: {data}")
                return None
                
        except Exception as e:
            print(f"‚ùå L·ªói khi l·∫•y token: {e}")
            return None

    async def get_approval_instance(self, instance_code: str, access_token: str) -> Optional[Dict]:
        """
        L·∫•y th√¥ng tin chi ti·∫øt c·ªßa approval instance t·ª´ Lark API.
        
        Args:
            instance_code (str): M√£ ƒë·ªãnh danh c·ªßa approval instance
            access_token (str): Access token ƒë·ªÉ x√°c th·ª±c API call
            
        Returns:
            Optional[Dict]: Th√¥ng tin instance n·∫øu th√†nh c√¥ng, None n·∫øu th·∫•t b·∫°i
        """
        try:
            url = f"{settings.BASE_URL}/approval/v4/instances/{instance_code}"
            headers = {"Authorization": f"Bearer {access_token}"}
            
            print(f"üîç ƒêang l·∫•y th√¥ng tin instance: {instance_code}")
            response = requests.get(url, headers=headers, timeout=10)
            
            # Ki·ªÉm tra HTTP status code
            if response.status_code != 200:
                print(f"‚ùå L·ªói HTTP khi g·ªçi API: {response.status_code}")
                return None
                
            api_response = response.json()
            
            # Ki·ªÉm tra Lark API response code
            if api_response.get("code") != 0:
                print(f"‚ùå L·ªói Lark API response: {api_response}")
                return None
                
            return api_response
            
        except Exception as e:
            print(f"‚ùå L·ªói khi l·∫•y th√¥ng tin approval instance: {e}")
            return None

    async def upload_image_to_approval(self, image_buffer, filename: str, access_token: str) -> Dict:
        """
        Upload h√¨nh ·∫£nh l√™n Lark Approval system ƒë·ªÉ s·ª≠ d·ª•ng trong comments.
        
        Args:
            image_buffer: Buffer ch·ª©a d·ªØ li·ªáu h√¨nh ·∫£nh (bytes)
            filename (str): T√™n file c·ªßa h√¨nh ·∫£nh
            access_token (str): Access token ƒë·ªÉ x√°c th·ª±c API call
            
        Returns:
            Dict: Dictionary ch·ª©a:
                - success (bool): Tr·∫°ng th√°i upload
                - file_code (str): M√£ file t·ª´ Lark (n·∫øu success)  
                - file_url (str): URL file t·ª´ Lark (n·∫øu success)
                - error (str): Th√¥ng b√°o l·ªói (n·∫øu failed)
        """
        try:
            # Reset buffer position v·ªÅ ƒë·∫ßu ƒë·ªÉ ƒë·ªçc t·ª´ beginning
            image_buffer.seek(0)
            
            # Chu·∫©n b·ªã multipart form data cho upload
            files = {
                'name': (None, filename),
                'type': (None, 'image'),
                'content': (filename, image_buffer, 'image/png')
            }
            
            headers = {
                'Authorization': f'Bearer {access_token}'
            }
            
            print(f"üì§ ƒêang upload h√¨nh ·∫£nh: {filename}")
            response = requests.post(settings.APPROVAL_UPLOAD_URL, files=files, headers=headers)
            
            # X·ª≠ l√Ω response t·ª´ upload API
            if response.status_code == 200:
                data = response.json()
                if data.get('code') == 0:
                    file_code = data['data']['code']
                    file_url = data['data']['url']
                    print(f'‚úÖ Upload h√¨nh ·∫£nh th√†nh c√¥ng! File code: {file_code}')
                    return {
                        'success': True,
                        'file_code': file_code,
                        'file_url': file_url
                    }
                else:
                    error_msg = f"L·ªói API: {data.get('msg')} (code: {data.get('code')})"
                    print(f'‚ùå Upload th·∫•t b·∫°i: {error_msg}')
                    return {'success': False, 'error': error_msg}
            else:
                error_msg = f"L·ªói HTTP: {response.status_code}"
                print(f'‚ùå Upload th·∫•t b·∫°i: {error_msg}')
                return {'success': False, 'error': error_msg}
                
        except Exception as e:
            error_msg = f"Exception: {str(e)}"
            print(f"‚ùå L·ªói upload: {error_msg}")
            return {'success': False, 'error': error_msg}

    async def create_enhanced_comment_with_image(self, instance_code: str, file_url: str, file_code: str, 
                                               filename: str, qr_type: str, amount: int, node_name: str,
                                               access_token: str, user_id: str = None) -> Dict:
        """
        T·∫°o comment v·ªõi h√¨nh ·∫£nh QR code v√† th√¥ng tin chi ti·∫øt.
        
        Args:
            instance_code (str): M√£ instance c·ªßa approval workflow
            file_url (str): URL c·ªßa file ƒë√£ upload
            file_code (str): Code c·ªßa file t·ª´ Lark system
            filename (str): T√™n file h√¨nh ·∫£nh
            qr_type (str): Lo·∫°i QR ('advance' ho·∫∑c 'payment')
            amount (int): S·ªë ti·ªÅn c·ªßa QR code
            node_name (str): T√™n node trong workflow
            access_token (str): Access token ƒë·ªÉ x√°c th·ª±c
            user_id (str, optional): User ID th·ª±c hi·ªán comment
            
        Returns:
            Dict: Dictionary ch·ª©a:
                - success (bool): Tr·∫°ng th√°i t·∫°o comment
                - comment_id (str): ID c·ªßa comment ƒë∆∞·ª£c t·∫°o (n·∫øu success)
                - error (str): Th√¥ng b√°o l·ªói (n·∫øu failed)
        """
        try:
            # S·ª≠ d·ª•ng default user ID n·∫øu kh√¥ng ƒë∆∞·ª£c cung c·∫•p
            if user_id is None:
                user_id = settings.DEFAULT_USER_ID
                
            create_comment_url = f'{settings.BASE_URL}/approval/v4/instances/{instance_code}/comments'
            
            # Parameters cho API call
            params = {
                "user_id": user_id,
                "user_id_type": "user_id"
            }
            
            # T·∫°o text hi·ªÉn th·ªã cho QR type
            qr_type_display = {
                'advance': 'T·∫†M ·ª®NG',
                'payment': 'THANH TO√ÅN'
            }
            
            # T·∫°o n·ªôi dung comment v·ªõi th√¥ng tin chi ti·∫øt
            comment_text = f"""üè¶ M√£ VietQR {qr_type_display.get(qr_type, qr_type.upper())}
üí∞ S·ªë ti·ªÅn: {amount:,} VND"""

            # ∆Ø·ªõc t√≠nh k√≠ch th∆∞·ªõc file (rough estimate)
            try:
                file_size = len(filename) * 100  # ∆Ø·ªõc t√≠nh d·ª±a tr√™n ƒë·ªô d√†i filename
            except:
                file_size = 50000  # Gi√° tr·ªã m·∫∑c ƒë·ªãnh

            # T·∫°o content data v·ªõi text v√† file attachment
            content_data = {
                "text": comment_text,
                "files": [{
                    "url": file_url,
                    "fileSize": file_size,
                    "title": filename,
                    "type": "image",
                    "extra": file_code
                }]
            }
            
            # Request body v·ªõi JSON content
            request_body = {
                "content": json.dumps(content_data, ensure_ascii=False)
            }
            
            headers_comment = {
                'Authorization': f'Bearer {access_token}',
                'Content-Type': 'application/json'
            }
            
            print(f"üì§ ƒêang t·∫°o enhanced comment cho instance: {instance_code}")
            print(f"   N·ªôi dung: {comment_text.replace(chr(10), ' | ')}")
            
            # G·ªçi API ƒë·ªÉ t·∫°o comment
            response = requests.post(
                create_comment_url, 
                params=params,
                json=request_body, 
                headers=headers_comment
            )
            
            # X·ª≠ l√Ω response t·ª´ comment API
            if response.status_code == 200:
                comment_result = response.json()
                if comment_result.get('code') == 0:
                    comment_id = comment_result.get("data", {}).get("comment_id", "N/A")
                    print(f'‚úÖ T·∫°o enhanced comment th√†nh c√¥ng! Comment ID: {comment_id}')
                    return {'success': True, 'comment_id': comment_id}
                else:
                    error_msg = f"L·ªói API: {comment_result.get('msg')} (code: {comment_result.get('code')})"
                    print(f'‚ùå T·∫°o comment th·∫•t b·∫°i: {error_msg}')
                    return {'success': False, 'error': error_msg}
            else:
                error_msg = f"L·ªói HTTP: {response.status_code}"
                print(f'‚ùå T·∫°o comment th·∫•t b·∫°i: {error_msg}')
                return {'success': False, 'error': error_msg}
                
        except Exception as e:
            error_msg = f"Exception: {str(e)}"
            print(f"‚ùå L·ªói t·∫°o enhanced comment: {error_msg}")
            return {'success': False, 'error': error_msg}


lark_service = LarkService()
