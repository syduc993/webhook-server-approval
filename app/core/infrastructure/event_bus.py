# app/services/event_bus.py
import asyncio
from typing import Dict, List, Callable, Any
from datetime import datetime


class EventBus:
    """
    Event Bus system ƒë·ªÉ qu·∫£n l√Ω v√† ph√¢n ph·ªëi events trong ·ª©ng d·ª•ng.
    
    EventBus cho ph√©p c√°c component ƒëƒÉng k√Ω handlers cho c√°c lo·∫°i event kh√°c nhau
    v√† publish events ƒë·ªÉ th·ª±c thi t·∫•t c·∫£ handlers ƒë√£ ƒëƒÉng k√Ω m·ªôt c√°ch b·∫•t ƒë·ªìng b·ªô.
    
    Attributes:
        handlers (Dict[str, List[Callable]]): Dictionary ch·ª©a danh s√°ch handlers cho t·ª´ng event type
        event_history (List[Dict]): L·ªãch s·ª≠ t·∫•t c·∫£ events ƒë√£ ƒë∆∞·ª£c publish
    """
    
    def __init__(self):
        """Kh·ªüi t·∫°o EventBus v·ªõi handlers v√† event history r·ªóng."""
        self.handlers: Dict[str, List[Callable]] = {}
        self.event_history: List[Dict] = []
    
    def subscribe(self, event_type: str, handler: Callable):
        """
        ƒêƒÉng k√Ω handler cho m·ªôt event type c·ª• th·ªÉ.
        
        Args:
            event_type (str): Lo·∫°i event c·∫ßn l·∫Øng nghe
            handler (Callable): H√†m x·ª≠ l√Ω s·∫Ω ƒë∆∞·ª£c g·ªçi khi event ƒë∆∞·ª£c publish
            
        Note:
            Handler ph·∫£i l√† async function v√† nh·∫≠n event_data l√†m tham s·ªë
        """
        # Kh·ªüi t·∫°o danh s√°ch handlers cho event type n·∫øu ch∆∞a t·ªìn t·∫°i
        if event_type not in self.handlers:
            self.handlers[event_type] = []
        
        # Th√™m handler v√†o danh s√°ch
        self.handlers[event_type].append(handler)
        print(f"üìù ƒê√£ ƒëƒÉng k√Ω handler cho event: {event_type}")
    
    async def publish(self, event_type: str, event_data: Dict[str, Any]):
        """
        Publish event v√† th·ª±c thi t·∫•t c·∫£ handlers ƒë√£ ƒëƒÉng k√Ω song song.
        
        Args:
            event_type (str): Lo·∫°i event c·∫ßn publish
            event_data (Dict[str, Any]): D·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c truy·ªÅn cho c√°c handlers
            
        Returns:
            List: Danh s√°ch k·∫øt qu·∫£ t·ª´ t·∫•t c·∫£ handlers (bao g·ªìm c·∫£ exceptions)
        """
        print(f"üì¢ ƒêang publish event: {event_type}")
        
        # L∆∞u l·ªãch s·ª≠ event
        event_record = {
            "timestamp": datetime.now().isoformat(),
            "event_type": event_type,
            "data": event_data,
            "handlers_count": len(self.handlers.get(event_type, []))
        }
        self.event_history.append(event_record)
        
        # Th·ª±c thi t·∫•t c·∫£ handlers ƒë·ªìng th·ªùi
        if event_type in self.handlers:
            tasks = []
            
            # T·∫°o task cho m·ªói handler
            for handler in self.handlers[event_type]:
                task = asyncio.create_task(
                    self._run_handler_safe(handler, event_data)
                )
                tasks.append(task)
            
            # ƒê·ª£i t·∫•t c·∫£ handlers ho√†n th√†nh (k·ªÉ c·∫£ khi c√≥ l·ªói)
            results = await asyncio.gather(*tasks, return_exceptions=True)
            
            # Ghi log k·∫øt qu·∫£ t·ª´ m·ªói handler
            for i, result in enumerate(results):
                handler_name = self.handlers[event_type][i].__name__
                if isinstance(result, Exception):
                    print(f"‚ùå Handler {handler_name} th·∫•t b·∫°i: {result}")
                else:
                    print(f"‚úÖ Handler {handler_name} ho√†n th√†nh: {result}")
            
            return results
        else:
            print(f"‚ö†Ô∏è Kh√¥ng c√≥ handler n√†o ƒë∆∞·ª£c ƒëƒÉng k√Ω cho event: {event_type}")
            return []
    
    async def _run_handler_safe(self, handler: Callable, event_data: Dict) -> Dict:
        """
        Th·ª±c thi handler v·ªõi error handling v√† monitoring th·ªùi gian.
        
        Args:
            handler (Callable): Handler function c·∫ßn th·ª±c thi
            event_data (Dict): D·ªØ li·ªáu event ƒë∆∞·ª£c truy·ªÅn cho handler
            
        Returns:
            Dict: Th√¥ng tin k·∫øt qu·∫£ bao g·ªìm success status, result/error, v√† th·ªùi gian th·ª±c thi
        """
        handler_name = handler.__name__
        try:
            print(f"üöÄ B·∫Øt ƒë·∫ßu th·ª±c thi handler: {handler_name}")
            start_time = datetime.now()
            
            # G·ªçi handler (ph·∫£i l√† async function)
            result = await handler(event_data)
            
            # T√≠nh th·ªùi gian th·ª±c thi
            end_time = datetime.now()
            duration = (end_time - start_time).total_seconds()
            
            return {
                "handler": handler_name,
                "success": True,
                "result": result,
                "duration_seconds": duration
            }
            
        except Exception as e:
            print(f"‚ùå Handler {handler_name} g·∫∑p l·ªói: {e}")
            return {
                "handler": handler_name,
                "success": False,
                "error": str(e),
                "duration_seconds": 0
            }
    
    def get_event_history(self, limit: int = 50) -> List[Dict]:
        """
        L·∫•y l·ªãch s·ª≠ c√°c events ƒë√£ ƒë∆∞·ª£c publish.
        
        Args:
            limit (int, optional): S·ªë l∆∞·ª£ng events g·∫ßn nh·∫•t c·∫ßn l·∫•y. M·∫∑c ƒë·ªãnh l√† 50.
            
        Returns:
            List[Dict]: Danh s√°ch c√°c event records theo th·ª© t·ª± th·ªùi gian (m·ªõi nh·∫•t cu·ªëi)
        """
        return self.event_history[-limit:]


event_bus = EventBus()
