from typing import List, Dict, Any, Optional

class FieldExtractor:
    def extract_field_value(self, form_data: List[Dict], field_name: str, debug: bool = False) -> Optional[Any]:
        """
        Enhanced version: Tr√≠ch xu·∫•t gi√° tr·ªã c·ªßa m·ªôt field t·ª´ form data v·ªõi better error handling
        
        Args:
            form_data (list): Form data t·ª´ API
            field_name (str): T√™n field c·∫ßn t√¨m
            debug (bool): In debug info
            
        Returns:
            Gi√° tr·ªã field ho·∫∑c None n·∫øu kh√¥ng t√¨m th·∫•y
        """
        try:
            if debug:
                print(f"üîç Searching for field: '{field_name}'")
                
            # Search in top-level fields
            for field in form_data:
                if field.get('name') == field_name:
                    value = field.get('value')
                    if debug:
                        print(f"‚úÖ Found '{field_name}' in top-level: {value}")
                    return value
                
                # Search in nested fieldList
                if field.get('type') == 'fieldList' and 'value' in field:
                    field_list_values = field['value']
                    if isinstance(field_list_values, list):
                        for field_group in field_list_values:
                            if isinstance(field_group, list):
                                for sub_field in field_group:
                                    if isinstance(sub_field, dict) and sub_field.get('name') == field_name:
                                        value = sub_field.get('value')
                                        if debug:
                                            print(f"‚úÖ Found '{field_name}' in fieldList: {value}")
                                        return value
            
            if debug:
                print(f"‚ùå Field '{field_name}' not found")
                print("Available fields:", [f.get('name') for f in form_data if f.get('name')])
                
            return None
            
        except Exception as e:
            print(f"‚ùå Error extracting field '{field_name}': {e}")
            return None

    def get_all_field_names(self, form_data: List[Dict]) -> List[str]:
        """
        L·∫•y t·∫•t c·∫£ field names t·ª´ form data
        
        Args:
            form_data: Form data t·ª´ API
            
        Returns:
            List[str]: Danh s√°ch t√™n fields
        """
        field_names = []
        
        try:
            for field in form_data:
                field_name = field.get('name')
                if field_name:
                    field_names.append(field_name)
                
                # Check nested fieldList
                if field.get('type') == 'fieldList' and 'value' in field:
                    field_list_values = field['value']
                    if isinstance(field_list_values, list):
                        for field_group in field_list_values:
                            if isinstance(field_group, list):
                                for sub_field in field_group:
                                    if isinstance(sub_field, dict):
                                        sub_field_name = sub_field.get('name')
                                        if sub_field_name:
                                            field_names.append(sub_field_name)
        except Exception as e:
            print(f"‚ùå Error getting field names: {e}")
        
        return list(set(field_names))  # Remove duplicates

    def get_amount_fields(self, form_data: List[Dict]) -> Dict[str, Any]:
        """
        T√¨m t·∫•t c·∫£ fields c√≥ ch·ª©a "ti·ªÅn" ho·∫∑c "amount"
        
        Args:
            form_data: Form data t·ª´ API
            
        Returns:
            Dict[str, Any]: Dict v·ªõi field name l√† key, value l√† gi√° tr·ªã
        """
        amount_fields = {}
        
        try:
            for field in form_data:
                field_name = field.get('name', '').lower()
                if 'ti·ªÅn' in field_name or 'amount' in field_name:
                    amount_fields[field.get('name')] = field.get('value')
        except Exception as e:
            print(f"‚ùå Error getting amount fields: {e}")
        
        return amount_fields

    def extract_field_from_fieldlist(self, form_data: List[Dict], fieldlist_name: str, 
                                target_field_name: str, debug: bool = False) -> Optional[Any]:
        """
        Tr√≠ch xu·∫•t gi√° tr·ªã ƒë·∫ßu ti√™n c·ªßa m·ªôt field t·ª´ b√™n trong m·ªôt fieldList c·ª• th·ªÉ.
        
        H√†m n√†y ch·ªâ tr·∫£ v·ªÅ gi√° tr·ªã ƒë·∫ßu ti√™n t√¨m th·∫•y. ƒê·ªÉ l·∫•y t·∫•t c·∫£ gi√° tr·ªã,
        s·ª≠ d·ª•ng `extract_all_values_from_fieldlist`.
        
        Args:
            form_data: Form data t·ª´ API
            fieldlist_name: T√™n fieldList container (vd: "K·∫ø to√°n - Th√¥ng tin t·∫°m ·ª©ng")  
            target_field_name: T√™n field c·∫ßn t√¨m (vd: "S·ªë ti·ªÅn chi")
            debug: In debug info
            
        Returns:
            Gi√° tr·ªã field ho·∫∑c None n·∫øu kh√¥ng t√¨m th·∫•y
        """
        try:
            if debug:
                print(f"üîç Searching for first '{target_field_name}' in fieldList '{fieldlist_name}'")
                
            if not fieldlist_name or not target_field_name:
                if debug: print("‚ùå Invalid parameters: fieldlist_name and target_field_name required")
                return None
                
            for field in form_data:
                if field.get('name') == fieldlist_name and field.get('type') == 'fieldList':
                    field_list_values = field.get('value', [])
                    if debug: print(f"üìã Found fieldList '{fieldlist_name}' with {len(field_list_values)} items")
                    
                    for field_group in field_list_values:
                        if isinstance(field_group, list):
                            for sub_field in field_group:
                                if isinstance(sub_field, dict) and sub_field.get('name') == target_field_name:
                                    value = sub_field.get('value')
                                    if debug: print(f"‚úÖ Found first '{target_field_name}' = {value}")
                                    return value
                    
                    if debug: print(f"‚ùå Field '{target_field_name}' not found in fieldList")
                    return None
            
            if debug:
                print(f"‚ùå fieldList '{fieldlist_name}' not found")
                available = [f.get('name') for f in form_data if f.get('type') == 'fieldList']
                print(f"Available fieldLists: {available}")
            return None
            
        except Exception as e:
            print(f"‚ùå Error extracting field from fieldList: {e}")
            return None
            
    def extract_all_values_from_fieldlist(self, form_data: List[Dict], fieldlist_name: str, 
                                          target_field_name: str, debug: bool = False) -> List[Any]:
        """
        ‚úÖ M·ªöI: Tr√≠ch xu·∫•t T·∫§T C·∫¢ c√°c gi√° tr·ªã c·ªßa m·ªôt field t·ª´ T·∫§T C·∫¢ c√°c d√≤ng trong m·ªôt fieldList.
        
        H·ªØu √≠ch khi c·∫ßn t√≠nh t·ªïng c√°c gi√° tr·ªã trong m·ªôt danh s√°ch, v√≠ d·ª• nh∆∞ t·ªïng "S·ªë ti·ªÅn chi"
        t·ª´ nhi·ªÅu l·∫ßn t·∫°m ·ª©ng c·ªßa k·∫ø to√°n.
        
        Args:
            form_data: Form data t·ª´ API.
            fieldlist_name: T√™n c·ªßa fieldList container (v√≠ d·ª•: "K·∫ø to√°n - Th√¥ng tin t·∫°m ·ª©ng").
            target_field_name: T√™n c·ªßa field c·∫ßn tr√≠ch xu·∫•t gi√° tr·ªã (v√≠ d·ª•: "S·ªë ti·ªÅn chi").
            debug: B·∫≠t/t·∫Øt in th√¥ng tin g·ª° l·ªói.
            
        Returns:
            List[Any]: M·ªôt danh s√°ch ch·ª©a t·∫•t c·∫£ c√°c gi√° tr·ªã t√¨m th·∫•y. Tr·∫£ v·ªÅ list r·ªóng n·∫øu kh√¥ng t√¨m th·∫•y g√¨.
        """
        extracted_values = []
        try:
            if debug:
                print(f"üîç Searching for ALL '{target_field_name}' values in fieldList '{fieldlist_name}'")

            for field in form_data:
                if field.get('name') == fieldlist_name and field.get('type') == 'fieldList':
                    field_list_values = field.get('value', [])
                    if debug:
                        print(f"üìã Found fieldList '{fieldlist_name}' with {len(field_list_values)} rows.")
                    
                    # Duy·ªát qua t·ª´ng d√≤ng (field_group) trong fieldList
                    for i, field_group in enumerate(field_list_values):
                        if isinstance(field_group, list):
                            # Duy·ªát qua t·ª´ng tr∆∞·ªùng (sub_field) trong d√≤ng
                            for sub_field in field_group:
                                if isinstance(sub_field, dict) and sub_field.get('name') == target_field_name:
                                    value = sub_field.get('value')
                                    extracted_values.append(value)
                                    if debug:
                                        print(f"   ‚úÖ Row {i+1}: Found value '{value}'")
                    
                    # Sau khi duy·ªát xong, kh√¥ng c·∫ßn t√¨m n·ªØa
                    if debug:
                        print(f"üìä Total values found: {len(extracted_values)}")
                    return extracted_values
            
            if debug:
                print(f"‚ùå FieldList '{fieldlist_name}' not found in form data.")
            return extracted_values

        except Exception as e:
            print(f"‚ùå Error extracting all values from fieldList: {e}")
            return extracted_values

    def extract_fields_by_prefix(self, form_data: List[Dict], prefix: str, debug: bool = False) -> Dict[str, Any]:
        """
        ‚úÖ M·ªöI: Tr√≠ch xu·∫•t t·∫•t c·∫£ c√°c tr∆∞·ªùng c√≥ t√™n b·∫Øt ƒë·∫ßu b·∫±ng m·ªôt ti·ªÅn t·ªë (prefix) cho tr∆∞·ªõc.
        
        H·ªØu √≠ch ƒë·ªÉ t√¨m c√°c tr∆∞·ªùng ƒë·ªông nh∆∞ "S·ªë ti·ªÅn t·∫°m ·ª©ng l·∫ßn 1:", "S·ªë ti·ªÅn t·∫°m ·ª©ng l·∫ßn 2:",...
        
        Args:
            form_data: Form data t·ª´ API.
            prefix: Ti·ªÅn t·ªë d√πng ƒë·ªÉ t√¨m ki·∫øm (v√≠ d·ª•: "S·ªë ti·ªÅn t·∫°m ·ª©ng l·∫ßn").
            debug: B·∫≠t/t·∫Øt in th√¥ng tin g·ª° l·ªói.
            
        Returns:
            Dict[str, Any]: M·ªôt dictionary v·ªõi key l√† t√™n ƒë·∫ßy ƒë·ªß c·ªßa tr∆∞·ªùng v√† value l√† gi√° tr·ªã c·ªßa n√≥.
        """
        extracted_fields = {}
        try:
            if debug:
                print(f"üîç Searching for all fields with prefix: '{prefix}'")
            
            # Duy·ªát qua t·∫•t c·∫£ c√°c tr∆∞·ªùng ·ªü m·ªçi c·∫•p ƒë·ªô
            for field in form_data:
                field_name = field.get('name')
                
                # Ki·ªÉm tra tr∆∞·ªùng ·ªü c·∫•p cao nh·∫•t
                if field_name and field_name.startswith(prefix):
                    value = field.get('value')
                    extracted_fields[field_name] = value
                    if debug:
                        print(f"   ‚úÖ Found top-level field: '{field_name}' = {value}")
                
                # Ki·ªÉm tra c√°c tr∆∞·ªùng l·ªìng trong fieldList
                if field.get('type') == 'fieldList' and 'value' in field:
                    field_list_values = field.get('value', [])
                    if isinstance(field_list_values, list):
                        for field_group in field_list_values:
                            if isinstance(field_group, list):
                                for sub_field in field_group:
                                    sub_field_name = sub_field.get('name')
                                    if sub_field_name and sub_field_name.startswith(prefix):
                                        value = sub_field.get('value')
                                        extracted_fields[sub_field_name] = value
                                        if debug:
                                            print(f"   ‚úÖ Found nested field: '{sub_field_name}' = {value}")
            
            if debug:
                print(f"üìä Total fields found with prefix: {len(extracted_fields)}")
            return extracted_fields

        except Exception as e:
            print(f"‚ùå Error extracting fields by prefix '{prefix}': {e}")
            return extracted_fields